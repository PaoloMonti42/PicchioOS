# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ev3', [dirname(__file__)])
        except ImportError:
            import _ev3
            return _ev3
        if fp is not None:
            try:
                _mod = imp.load_module('_ev3', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ev3 = swig_import_helper()
    del swig_import_helper
else:
    import _ev3
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


EV3_BRICK = _ev3.EV3_BRICK

def ev3_init():
  return _ev3.ev3_init()
ev3_init = _ev3.ev3_init

def ev3_uninit():
  return _ev3.ev3_uninit()
ev3_uninit = _ev3.ev3_uninit

def ev3_write_binary(*args):
  return _ev3.ev3_write_binary(*args)
ev3_write_binary = _ev3.ev3_write_binary

def ev3_write(*args):
  return _ev3.ev3_write(*args)
ev3_write = _ev3.ev3_write

def ev3_write_bool(*args):
  return _ev3.ev3_write_bool(*args)
ev3_write_bool = _ev3.ev3_write_bool

def ev3_write_int(*args):
  return _ev3.ev3_write_int(*args)
ev3_write_int = _ev3.ev3_write_int

def ev3_write_dword(*args):
  return _ev3.ev3_write_dword(*args)
ev3_write_dword = _ev3.ev3_write_dword

def ev3_write_byte(*args):
  return _ev3.ev3_write_byte(*args)
ev3_write_byte = _ev3.ev3_write_byte

def ev3_write_float(*args):
  return _ev3.ev3_write_float(*args)
ev3_write_float = _ev3.ev3_write_float

def ev3_multi_write_binary(*args):
  return _ev3.ev3_multi_write_binary(*args)
ev3_multi_write_binary = _ev3.ev3_multi_write_binary

def ev3_multi_write(*args):
  return _ev3.ev3_multi_write(*args)
ev3_multi_write = _ev3.ev3_multi_write

def ev3_multi_write_bool(*args):
  return _ev3.ev3_multi_write_bool(*args)
ev3_multi_write_bool = _ev3.ev3_multi_write_bool

def ev3_multi_write_int(*args):
  return _ev3.ev3_multi_write_int(*args)
ev3_multi_write_int = _ev3.ev3_multi_write_int

def ev3_multi_write_dword(*args):
  return _ev3.ev3_multi_write_dword(*args)
ev3_multi_write_dword = _ev3.ev3_multi_write_dword

def ev3_multi_write_byte(*args):
  return _ev3.ev3_multi_write_byte(*args)
ev3_multi_write_byte = _ev3.ev3_multi_write_byte

def ev3_multi_write_float(*args):
  return _ev3.ev3_multi_write_float(*args)
ev3_multi_write_float = _ev3.ev3_multi_write_float

def ev3_read_binary(*args):
  return _ev3.ev3_read_binary(*args)
ev3_read_binary = _ev3.ev3_read_binary

def ev3_read(*args):
  return _ev3.ev3_read(*args)
ev3_read = _ev3.ev3_read

def ev3_read_bool(*args):
  return _ev3.ev3_read_bool(*args)
ev3_read_bool = _ev3.ev3_read_bool

def ev3_read_int(*args):
  return _ev3.ev3_read_int(*args)
ev3_read_int = _ev3.ev3_read_int

def ev3_read_dword(*args):
  return _ev3.ev3_read_dword(*args)
ev3_read_dword = _ev3.ev3_read_dword

def ev3_read_byte(*args):
  return _ev3.ev3_read_byte(*args)
ev3_read_byte = _ev3.ev3_read_byte

def ev3_read_float(*args):
  return _ev3.ev3_read_float(*args)
ev3_read_float = _ev3.ev3_read_float

def ev3_listdir(*args):
  return _ev3.ev3_listdir(*args)
ev3_listdir = _ev3.ev3_listdir

def ev3_read_keys():
  return _ev3.ev3_read_keys()
ev3_read_keys = _ev3.ev3_read_keys

def ev3_poweroff():
  return _ev3.ev3_poweroff()
ev3_poweroff = _ev3.ev3_poweroff
EV3_KEY__NONE_ = _ev3.EV3_KEY__NONE_
EV3_KEY_UP = _ev3.EV3_KEY_UP
EV3_KEY_DOWN = _ev3.EV3_KEY_DOWN
EV3_KEY_LEFT = _ev3.EV3_KEY_LEFT
EV3_KEY_RIGHT = _ev3.EV3_KEY_RIGHT
EV3_KEY_CENTER = _ev3.EV3_KEY_CENTER
EV3_KEY_BACK = _ev3.EV3_KEY_BACK
DESC_LIMIT = _ev3.DESC_LIMIT
DESC_VEC_LEN = _ev3.DESC_VEC_LEN
EV3_LEFT_GREEN = _ev3.EV3_LEFT_GREEN
EV3_RIGHT_GREEN = _ev3.EV3_RIGHT_GREEN
EV3_LEFT_RED = _ev3.EV3_LEFT_RED
EV3_RIGHT_RED = _ev3.EV3_RIGHT_RED
LED_OUTA = _ev3.LED_OUTA
LED_OUTB = _ev3.LED_OUTB
LED_OUTC = _ev3.LED_OUTC
LED_OUTD = _ev3.LED_OUTD
LED__COUNT_ = _ev3.LED__COUNT_
TRIGGER_NONE = _ev3.TRIGGER_NONE
TRIGGER_MMC0 = _ev3.TRIGGER_MMC0
TRIGGER_TIMER = _ev3.TRIGGER_TIMER
TRIGGER_HEARTBEAT = _ev3.TRIGGER_HEARTBEAT
TRIGGER_DEFAULT_ON = _ev3.TRIGGER_DEFAULT_ON
TRIGGER_TRANSIENT = _ev3.TRIGGER_TRANSIENT
TRIGGER_LEGOEV3_BATTERY_CHARGING_OR_FULL = _ev3.TRIGGER_LEGOEV3_BATTERY_CHARGING_OR_FULL
TRIGGER_LEGOEV3_BATTERY_CHARGING = _ev3.TRIGGER_LEGOEV3_BATTERY_CHARGING
TRIGGER_LEGOEV3_BATTERY_FULL = _ev3.TRIGGER_LEGOEV3_BATTERY_FULL
TRIGGER_LEGOEV3_BATTERY_CHARGING_BLINK_FULL_SOLID = _ev3.TRIGGER_LEGOEV3_BATTERY_CHARGING_BLINK_FULL_SOLID
TRIGGER_RFKILL0 = _ev3.TRIGGER_RFKILL0
TRIGGER_PHY0RX = _ev3.TRIGGER_PHY0RX
TRIGGER_PHY0TX = _ev3.TRIGGER_PHY0TX
TRIGGER_PHY0ASSOC = _ev3.TRIGGER_PHY0ASSOC
TRIGGER_PHY0RADIO = _ev3.TRIGGER_PHY0RADIO
TRIGGER_RFKILL1 = _ev3.TRIGGER_RFKILL1
TRIGGER__COUNT_ = _ev3.TRIGGER__COUNT_
LED_ATTR__COUNT_ = _ev3.LED_ATTR__COUNT_

def get_led_brightness(*args):
  return _ev3.get_led_brightness(*args)
get_led_brightness = _ev3.get_led_brightness

def set_led_brightness(*args):
  return _ev3.set_led_brightness(*args)
set_led_brightness = _ev3.set_led_brightness

def get_led_delay_off(*args):
  return _ev3.get_led_delay_off(*args)
get_led_delay_off = _ev3.get_led_delay_off

def set_led_delay_off(*args):
  return _ev3.set_led_delay_off(*args)
set_led_delay_off = _ev3.set_led_delay_off

def get_led_delay_on(*args):
  return _ev3.get_led_delay_on(*args)
get_led_delay_on = _ev3.get_led_delay_on

def set_led_delay_on(*args):
  return _ev3.set_led_delay_on(*args)
set_led_delay_on = _ev3.set_led_delay_on

def get_led_max_brightness(*args):
  return _ev3.get_led_max_brightness(*args)
get_led_max_brightness = _ev3.get_led_max_brightness

def get_led_trigger(*args):
  return _ev3.get_led_trigger(*args)
get_led_trigger = _ev3.get_led_trigger

def set_led_trigger(*args):
  return _ev3.set_led_trigger(*args)
set_led_trigger = _ev3.set_led_trigger

def get_led_trigger_inx(*args):
  return _ev3.get_led_trigger_inx(*args)
get_led_trigger_inx = _ev3.get_led_trigger_inx

def set_led_trigger_inx(*args):
  return _ev3.set_led_trigger_inx(*args)
set_led_trigger_inx = _ev3.set_led_trigger_inx

def ev3_led_trigger(*args):
  return _ev3.ev3_led_trigger(*args)
ev3_led_trigger = _ev3.ev3_led_trigger
LIT_LEFT = _ev3.LIT_LEFT
LIT_RIGHT = _ev3.LIT_RIGHT
LIT__LOC__ = _ev3.LIT__LOC__
LIT_OFF = _ev3.LIT_OFF
LIT_GREEN = _ev3.LIT_GREEN
LIT_RED = _ev3.LIT_RED
LIT_AMBER = _ev3.LIT_AMBER
LIT__COL__ = _ev3.LIT__COL__

def light_color(*args):
  return _ev3.light_color(*args)
light_color = _ev3.light_color

def set_light(*args):
  return _ev3.set_light(*args)
set_light = _ev3.set_light

def get_light(*args):
  return _ev3.get_light(*args)
get_light = _ev3.get_light

def set_light_trigger(*args):
  return _ev3.set_light_trigger(*args)
set_light_trigger = _ev3.set_light_trigger

def get_light_trigger(*args):
  return _ev3.get_light_trigger(*args)
get_light_trigger = _ev3.get_light_trigger

def set_light_blink(*args):
  return _ev3.set_light_blink(*args)
set_light_blink = _ev3.set_light_blink

def get_light_blink(*args):
  return _ev3.get_light_blink(*args)
get_light_blink = _ev3.get_light_blink
PORT_DIR = _ev3.PORT_DIR
class EV3_PORT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EV3_PORT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EV3_PORT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_inx"] = _ev3.EV3_PORT_type_inx_set
    __swig_getmethods__["type_inx"] = _ev3.EV3_PORT_type_inx_get
    if _newclass:type_inx = _swig_property(_ev3.EV3_PORT_type_inx_get, _ev3.EV3_PORT_type_inx_set)
    __swig_setmethods__["port"] = _ev3.EV3_PORT_port_set
    __swig_getmethods__["port"] = _ev3.EV3_PORT_port_get
    if _newclass:port = _swig_property(_ev3.EV3_PORT_port_get, _ev3.EV3_PORT_port_set)
    __swig_setmethods__["extport"] = _ev3.EV3_PORT_extport_set
    __swig_getmethods__["extport"] = _ev3.EV3_PORT_extport_get
    if _newclass:extport = _swig_property(_ev3.EV3_PORT_extport_get, _ev3.EV3_PORT_extport_set)
    __swig_setmethods__["addr"] = _ev3.EV3_PORT_addr_set
    __swig_getmethods__["addr"] = _ev3.EV3_PORT_addr_get
    if _newclass:addr = _swig_property(_ev3.EV3_PORT_addr_get, _ev3.EV3_PORT_addr_set)
    def __init__(self): 
        this = _ev3.new_EV3_PORT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ev3.delete_EV3_PORT
    __del__ = lambda self : None;
EV3_PORT_swigregister = _ev3.EV3_PORT_swigregister
EV3_PORT_swigregister(EV3_PORT)
ev3 = _ev3.ev3
LIT_COLOR = ev3.LIT_COLOR

PORT_DESC__LIMIT_ = _ev3.PORT_DESC__LIMIT_
PORT__NONE_ = _ev3.PORT__NONE_
PORT_TYPE__NONE_ = _ev3.PORT_TYPE__NONE_
HT_NXT_SMUX_PORT = _ev3.HT_NXT_SMUX_PORT
LEGOEV3_INPUT_PORT = _ev3.LEGOEV3_INPUT_PORT
LEGOEV3_OUTPUT_PORT = _ev3.LEGOEV3_OUTPUT_PORT
MS_EV3_SMUX_PORT = _ev3.MS_EV3_SMUX_PORT
MS_NXTMMX_OUT_PORT = _ev3.MS_NXTMMX_OUT_PORT
WEDO_PORT = _ev3.WEDO_PORT
PORT_TYPE__COUNT_ = _ev3.PORT_TYPE__COUNT_
PORT_TYPE__UNKNOWN_ = _ev3.PORT_TYPE__UNKNOWN_
PORT_MODE__NONE_ = _ev3.PORT_MODE__NONE_
HT_NXT_SMUX_PORT_ANALOG = _ev3.HT_NXT_SMUX_PORT_ANALOG
HT_NXT_SMUX_ANALOG = _ev3.HT_NXT_SMUX_ANALOG
HT_NXT_SMUX_PORT_I2C = _ev3.HT_NXT_SMUX_PORT_I2C
HT_NXT_SMUX_I2C = _ev3.HT_NXT_SMUX_I2C
LEGOEV3_INPUT_PORT_AUTO = _ev3.LEGOEV3_INPUT_PORT_AUTO
INPUT_AUTO = _ev3.INPUT_AUTO
LEGOEV3_INPUT_PORT_NXT_ANALOG = _ev3.LEGOEV3_INPUT_PORT_NXT_ANALOG
INPUT_NXT_ANALOG = _ev3.INPUT_NXT_ANALOG
LEGOEV3_INPUT_PORT_NXT_COLOR = _ev3.LEGOEV3_INPUT_PORT_NXT_COLOR
INPUT_NXT_COLOR = _ev3.INPUT_NXT_COLOR
LEGOEV3_INPUT_PORT_NXT_I2C = _ev3.LEGOEV3_INPUT_PORT_NXT_I2C
INPUT_NXT_I2C = _ev3.INPUT_NXT_I2C
LEGOEV3_INPUT_PORT_OTHER_I2C = _ev3.LEGOEV3_INPUT_PORT_OTHER_I2C
INPUT_OTHER_I2C = _ev3.INPUT_OTHER_I2C
LEGOEV3_INPUT_PORT_EV3_ANALOG = _ev3.LEGOEV3_INPUT_PORT_EV3_ANALOG
INPUT_EV3_ANALOG = _ev3.INPUT_EV3_ANALOG
LEGOEV3_INPUT_PORT_EV3_UART = _ev3.LEGOEV3_INPUT_PORT_EV3_UART
INPUT_EV3_UART = _ev3.INPUT_EV3_UART
LEGOEV3_INPUT_PORT_OTHER_UART = _ev3.LEGOEV3_INPUT_PORT_OTHER_UART
INPUT_OTHER_UART = _ev3.INPUT_OTHER_UART
LEGOEV3_INPUT_PORT_RAW = _ev3.LEGOEV3_INPUT_PORT_RAW
INPUT_RAW = _ev3.INPUT_RAW
LEGOEV3_OUTPUT_PORT_AUTO = _ev3.LEGOEV3_OUTPUT_PORT_AUTO
OUTPUT_AUTO = _ev3.OUTPUT_AUTO
LEGOEV3_OUTPUT_PORT_TACHO_MOTOR = _ev3.LEGOEV3_OUTPUT_PORT_TACHO_MOTOR
OUTPUT_TACHO_MOTOR = _ev3.OUTPUT_TACHO_MOTOR
LEGOEV3_OUTPUT_PORT_DC_MOTOR = _ev3.LEGOEV3_OUTPUT_PORT_DC_MOTOR
OUTPUT_DC_MOTOR = _ev3.OUTPUT_DC_MOTOR
LEGOEV3_OUTPUT_PORT_LED = _ev3.LEGOEV3_OUTPUT_PORT_LED
OUTPUT_LED = _ev3.OUTPUT_LED
LEGOEV3_OUTPUT_PORT_RAW = _ev3.LEGOEV3_OUTPUT_PORT_RAW
OUTPUT_RAW = _ev3.OUTPUT_RAW
MS_EV3_SMUX_PORT_UART = _ev3.MS_EV3_SMUX_PORT_UART
MS_EV3_SMUX_UART = _ev3.MS_EV3_SMUX_UART
MS_EV3_SMUX_PORT_ANALOG = _ev3.MS_EV3_SMUX_PORT_ANALOG
MS_EV3_SMUX_ANALOG = _ev3.MS_EV3_SMUX_ANALOG
MS_NXTMMX_OUT_PORT_TACHO_MOTOR = _ev3.MS_NXTMMX_OUT_PORT_TACHO_MOTOR
MS_NXTMMX_TACHO_MOTOR = _ev3.MS_NXTMMX_TACHO_MOTOR
WEDO_PORT_AUTO = _ev3.WEDO_PORT_AUTO
WEDO_AUTO = _ev3.WEDO_AUTO
PORT_MODE__COUNT_ = _ev3.PORT_MODE__COUNT_
PORT_MODE__UNKNOWN_ = _ev3.PORT_MODE__UNKNOWN_

def get_port_address(*args):
  return _ev3.get_port_address(*args)
get_port_address = _ev3.get_port_address

def get_port_driver_name(*args):
  return _ev3.get_port_driver_name(*args)
get_port_driver_name = _ev3.get_port_driver_name

def get_port_mode(*args):
  return _ev3.get_port_mode(*args)
get_port_mode = _ev3.get_port_mode

def set_port_mode(*args):
  return _ev3.set_port_mode(*args)
set_port_mode = _ev3.set_port_mode

def multi_set_port_mode(*args):
  return _ev3.multi_set_port_mode(*args)
multi_set_port_mode = _ev3.multi_set_port_mode

def get_port_modes(*args):
  return _ev3.get_port_modes(*args)
get_port_modes = _ev3.get_port_modes

def set_port_set_device(*args):
  return _ev3.set_port_set_device(*args)
set_port_set_device = _ev3.set_port_set_device

def multi_set_port_set_device(*args):
  return _ev3.multi_set_port_set_device(*args)
multi_set_port_set_device = _ev3.multi_set_port_set_device

def get_port_status(*args):
  return _ev3.get_port_status(*args)
get_port_status = _ev3.get_port_status

def ev3_port_type(*args):
  return _ev3.ev3_port_type(*args)
ev3_port_type = _ev3.ev3_port_type

def get_port_type_inx(*args):
  return _ev3.get_port_type_inx(*args)
get_port_type_inx = _ev3.get_port_type_inx

def get_port_desc(*args):
  return _ev3.get_port_desc(*args)
get_port_desc = _ev3.get_port_desc

def ev3_port_desc(*args):
  return _ev3.ev3_port_desc(*args)
ev3_port_desc = _ev3.ev3_port_desc

def ev3_port_desc_type_inx(*args):
  return _ev3.ev3_port_desc_type_inx(*args)
ev3_port_desc_type_inx = _ev3.ev3_port_desc_type_inx

def ev3_port_desc_port(*args):
  return _ev3.ev3_port_desc_port(*args)
ev3_port_desc_port = _ev3.ev3_port_desc_port

def ev3_port_desc_extport(*args):
  return _ev3.ev3_port_desc_extport(*args)
ev3_port_desc_extport = _ev3.ev3_port_desc_extport

def ev3_port_desc_addr(*args):
  return _ev3.ev3_port_desc_addr(*args)
ev3_port_desc_addr = _ev3.ev3_port_desc_addr

def ev3_port_port_name(*args):
  return _ev3.ev3_port_port_name(*args)
ev3_port_port_name = _ev3.ev3_port_port_name

def ev3_search_port_type(*args):
  return _ev3.ev3_search_port_type(*args)
ev3_search_port_type = _ev3.ev3_search_port_type

def ev3_search_port_plugged_in(*args):
  return _ev3.ev3_search_port_plugged_in(*args)
ev3_search_port_plugged_in = _ev3.ev3_search_port_plugged_in

def ev3_port_mode(*args):
  return _ev3.ev3_port_mode(*args)
ev3_port_mode = _ev3.ev3_port_mode

def get_port_mode_inx_of_type(*args):
  return _ev3.get_port_mode_inx_of_type(*args)
get_port_mode_inx_of_type = _ev3.get_port_mode_inx_of_type

def get_port_mode_inx(*args):
  return _ev3.get_port_mode_inx(*args)
get_port_mode_inx = _ev3.get_port_mode_inx

def set_port_mode_inx(*args):
  return _ev3.set_port_mode_inx(*args)
set_port_mode_inx = _ev3.set_port_mode_inx

def multi_set_port_mode_inx(*args):
  return _ev3.multi_set_port_mode_inx(*args)
multi_set_port_mode_inx = _ev3.multi_set_port_mode_inx

def ev3_port_init():
  return _ev3.ev3_port_init()
ev3_port_init = _ev3.ev3_port_init
EV3_PORT__NONE_ = _ev3.EV3_PORT__NONE_
EXT_PORT__NONE_ = _ev3.EXT_PORT__NONE_
INPUT_1 = _ev3.INPUT_1
INPUT_2 = _ev3.INPUT_2
INPUT_3 = _ev3.INPUT_3
INPUT_4 = _ev3.INPUT_4
OUTPUT_A = _ev3.OUTPUT_A
OUTPUT_B = _ev3.OUTPUT_B
OUTPUT_C = _ev3.OUTPUT_C
OUTPUT_D = _ev3.OUTPUT_D
MUX_1 = _ev3.MUX_1
MUX_2 = _ev3.MUX_2
MUX_3 = _ev3.MUX_3
MUX_4 = _ev3.MUX_4
SERVO__OFFSET_ = _ev3.SERVO__OFFSET_
SERVO_1 = _ev3.SERVO_1
SERVO_2 = _ev3.SERVO_2
SERVO_3 = _ev3.SERVO_3
SERVO_4 = _ev3.SERVO_4
SERVO_5 = _ev3.SERVO_5
SERVO_6 = _ev3.SERVO_6
SERVO_7 = _ev3.SERVO_7
SERVO_8 = _ev3.SERVO_8
NXTMMX__OFFSET_ = _ev3.NXTMMX__OFFSET_
NXTMMX_1 = _ev3.NXTMMX_1
NXTMMX_2 = _ev3.NXTMMX_2
WEDO__OFFSET_ = _ev3.WEDO__OFFSET_
WEDO_1 = _ev3.WEDO_1
WEDO_2 = _ev3.WEDO_2
WEDO_3 = _ev3.WEDO_3
WEDO_4 = _ev3.WEDO_4

def ev3_search_port(*args):
  return _ev3.ev3_search_port(*args)
ev3_search_port = _ev3.ev3_search_port

def ev3_parse_port_name(*args):
  return _ev3.ev3_parse_port_name(*args)
ev3_parse_port_name = _ev3.ev3_parse_port_name

def ev3_port_name(*args):
  return _ev3.ev3_port_name(*args)
ev3_port_name = _ev3.ev3_port_name
SENSOR_DIR = _ev3.SENSOR_DIR
class EV3_SENSOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EV3_SENSOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EV3_SENSOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_inx"] = _ev3.EV3_SENSOR_type_inx_set
    __swig_getmethods__["type_inx"] = _ev3.EV3_SENSOR_type_inx_get
    if _newclass:type_inx = _swig_property(_ev3.EV3_SENSOR_type_inx_get, _ev3.EV3_SENSOR_type_inx_set)
    __swig_setmethods__["port"] = _ev3.EV3_SENSOR_port_set
    __swig_getmethods__["port"] = _ev3.EV3_SENSOR_port_get
    if _newclass:port = _swig_property(_ev3.EV3_SENSOR_port_get, _ev3.EV3_SENSOR_port_set)
    __swig_setmethods__["extport"] = _ev3.EV3_SENSOR_extport_set
    __swig_getmethods__["extport"] = _ev3.EV3_SENSOR_extport_get
    if _newclass:extport = _swig_property(_ev3.EV3_SENSOR_extport_get, _ev3.EV3_SENSOR_extport_set)
    __swig_setmethods__["addr"] = _ev3.EV3_SENSOR_addr_set
    __swig_getmethods__["addr"] = _ev3.EV3_SENSOR_addr_get
    if _newclass:addr = _swig_property(_ev3.EV3_SENSOR_addr_get, _ev3.EV3_SENSOR_addr_set)
    def __init__(self): 
        this = _ev3.new_EV3_SENSOR()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ev3.delete_EV3_SENSOR
    __del__ = lambda self : None;
EV3_SENSOR_swigregister = _ev3.EV3_SENSOR_swigregister
EV3_SENSOR_swigregister(EV3_SENSOR)

SENSOR_DESC__LIMIT_ = _ev3.SENSOR_DESC__LIMIT_
SENSOR__NONE_ = _ev3.SENSOR__NONE_
SENSOR_TYPE__NONE_ = _ev3.SENSOR_TYPE__NONE_
EV3_ANALOG_XX = _ev3.EV3_ANALOG_XX
NXT_ANALOG = _ev3.NXT_ANALOG
PIXY_LEGO = _ev3.PIXY_LEGO
DI_DFLEX = _ev3.DI_DFLEX
FCL_9DOF = _ev3.FCL_9DOF
FCL_ADC = _ev3.FCL_ADC
FCL_ALTITUDE = _ev3.FCL_ALTITUDE
FCL_GESTURE = _ev3.FCL_GESTURE
FCL_HUMIDITY = _ev3.FCL_HUMIDITY
FCL_IR = _ev3.FCL_IR
FCL_LIGHT = _ev3.FCL_LIGHT
HT_NXT_COLOR = _ev3.HT_NXT_COLOR
HT_NXT_ANGLE = _ev3.HT_NXT_ANGLE
HT_NXT_ACCEL = _ev3.HT_NXT_ACCEL
HT_NXT_BAROMETRIC = _ev3.HT_NXT_BAROMETRIC
HT_NXT_COLOR_V2 = _ev3.HT_NXT_COLOR_V2
HT_NXT_EOPD = _ev3.HT_NXT_EOPD
HT_NXT_FORCE = _ev3.HT_NXT_FORCE
HT_NXT_GYRO = _ev3.HT_NXT_GYRO
HT_NXT_IR_LINK = _ev3.HT_NXT_IR_LINK
HT_NXT_IR_RECEIVER = _ev3.HT_NXT_IR_RECEIVER
HT_NXT_PIR = _ev3.HT_NXT_PIR
HT_NXT_COMPASS = _ev3.HT_NXT_COMPASS
HT_NXT_MAG = _ev3.HT_NXT_MAG
HT_NXT_IR_SEEK_V2 = _ev3.HT_NXT_IR_SEEK_V2
HT_NXT_SMUX = _ev3.HT_NXT_SMUX
HT_SUPER_PRO = _ev3.HT_SUPER_PRO
LEGO_EV3_US = _ev3.LEGO_EV3_US
LEGO_EV3_GYRO = _ev3.LEGO_EV3_GYRO
LEGO_EV3_COLOR = _ev3.LEGO_EV3_COLOR
LEGO_EV3_TOUCH = _ev3.LEGO_EV3_TOUCH
LEGO_EV3_IR = _ev3.LEGO_EV3_IR
WEDO_HUB = _ev3.WEDO_HUB
WEDO_MOTION = _ev3.WEDO_MOTION
WEDO_TILT = _ev3.WEDO_TILT
LEGO_POWER_STORAGE = _ev3.LEGO_POWER_STORAGE
LEGO_NXT_TEMP = _ev3.LEGO_NXT_TEMP
LEGO_NXT_TOUCH = _ev3.LEGO_NXT_TOUCH
LEGO_NXT_LIGHT = _ev3.LEGO_NXT_LIGHT
LEGO_NXT_SOUND = _ev3.LEGO_NXT_SOUND
LEGO_NXT_US = _ev3.LEGO_NXT_US
MI_XG1300L = _ev3.MI_XG1300L
MS_ABSOLUTE_IMU = _ev3.MS_ABSOLUTE_IMU
MS_ANGLE = _ev3.MS_ANGLE
MS_EV3_SMUX = _ev3.MS_EV3_SMUX
MS_LIGHT_ARRAY = _ev3.MS_LIGHT_ARRAY
MS_LINE_LEADER = _ev3.MS_LINE_LEADER
MS_NXTCAM = _ev3.MS_NXTCAM
MS_NXTMMX = _ev3.MS_NXTMMX
MS_8CH_SERVO = _ev3.MS_8CH_SERVO
MS_PPS58_NX = _ev3.MS_PPS58_NX
MS_PIXY_ADAPTER = _ev3.MS_PIXY_ADAPTER
MS_NXT_TOUCH_MUX = _ev3.MS_NXT_TOUCH_MUX
SENSOR_TYPE__COUNT_ = _ev3.SENSOR_TYPE__COUNT_
SENSOR_TYPE__UNKNOWN_ = _ev3.SENSOR_TYPE__UNKNOWN_
SENSOR_MODE__NONE_ = _ev3.SENSOR_MODE__NONE_
EV3_ANALOG_XX_ANALOG = _ev3.EV3_ANALOG_XX_ANALOG
NXT_ANALOG_ANALOG_0 = _ev3.NXT_ANALOG_ANALOG_0
NXT_ANALOG_ANALOG_1 = _ev3.NXT_ANALOG_ANALOG_1
PIXY_LEGO_ALL = _ev3.PIXY_LEGO_ALL
PIXY_LEGO_SIG1 = _ev3.PIXY_LEGO_SIG1
PIXY_LEGO_SIG2 = _ev3.PIXY_LEGO_SIG2
PIXY_LEGO_SIG3 = _ev3.PIXY_LEGO_SIG3
PIXY_LEGO_SIG4 = _ev3.PIXY_LEGO_SIG4
PIXY_LEGO_SIG5 = _ev3.PIXY_LEGO_SIG5
PIXY_LEGO_SIG6 = _ev3.PIXY_LEGO_SIG6
PIXY_LEGO_SIG7 = _ev3.PIXY_LEGO_SIG7
DI_DFLEX_FLEX = _ev3.DI_DFLEX_FLEX
FCL_9DOF_GYRO = _ev3.FCL_9DOF_GYRO
FCL_9DOF_ACC = _ev3.FCL_9DOF_ACC
FCL_9DOF_MAGNET = _ev3.FCL_9DOF_MAGNET
FCL_ADC_CH1_VOLTAGE = _ev3.FCL_ADC_CH1_VOLTAGE
FCL_ADC_CH2_VOLTAGE = _ev3.FCL_ADC_CH2_VOLTAGE
FCL_ADC_VOLTAGE = _ev3.FCL_ADC_VOLTAGE
FCL_ALTITUDE_PRESSURE = _ev3.FCL_ALTITUDE_PRESSURE
FCL_ALTITUDE_ALTITUDE = _ev3.FCL_ALTITUDE_ALTITUDE
FCL_GESTURE_GESTURE = _ev3.FCL_GESTURE_GESTURE
FCL_GESTURE_PROXIMITY = _ev3.FCL_GESTURE_PROXIMITY
FCL_GESTURE_RGB_RAW = _ev3.FCL_GESTURE_RGB_RAW
FCL_GESTURE_CLEAR = _ev3.FCL_GESTURE_CLEAR
FCL_HUMIDITY_CENTIGRADE = _ev3.FCL_HUMIDITY_CENTIGRADE
FCL_HUMIDITY_FAHRENHEIT = _ev3.FCL_HUMIDITY_FAHRENHEIT
FCL_HUMIDITY_HUMIDITY = _ev3.FCL_HUMIDITY_HUMIDITY
FCL_IR_IR_DATA = _ev3.FCL_IR_IR_DATA
FCL_LIGHT_ILLUMINANCE = _ev3.FCL_LIGHT_ILLUMINANCE
HT_NXT_COLOR_COLOR = _ev3.HT_NXT_COLOR_COLOR
HT_NXT_COLOR_RED = _ev3.HT_NXT_COLOR_RED
HT_NXT_COLOR_GREEN = _ev3.HT_NXT_COLOR_GREEN
HT_NXT_COLOR_BLUE = _ev3.HT_NXT_COLOR_BLUE
HT_NXT_COLOR_RAW = _ev3.HT_NXT_COLOR_RAW
HT_NXT_COLOR_NORM = _ev3.HT_NXT_COLOR_NORM
HT_NXT_COLOR_ALL = _ev3.HT_NXT_COLOR_ALL
HT_NXT_ANGLE_ANGLE = _ev3.HT_NXT_ANGLE_ANGLE
HT_NXT_ANGLE_ANGLE_ACC = _ev3.HT_NXT_ANGLE_ANGLE_ACC
HT_NXT_ANGLE_SPEED = _ev3.HT_NXT_ANGLE_SPEED
HT_NXT_ACCEL_ACCEL = _ev3.HT_NXT_ACCEL_ACCEL
HT_NXT_ACCEL_ALL = _ev3.HT_NXT_ACCEL_ALL
HT_NXT_BAROMETRIC_PRESS = _ev3.HT_NXT_BAROMETRIC_PRESS
HT_NXT_BAROMETRIC_TEMP = _ev3.HT_NXT_BAROMETRIC_TEMP
HT_NXT_COLOR_V2_COLOR = _ev3.HT_NXT_COLOR_V2_COLOR
HT_NXT_COLOR_V2_RED = _ev3.HT_NXT_COLOR_V2_RED
HT_NXT_COLOR_V2_GREEN = _ev3.HT_NXT_COLOR_V2_GREEN
HT_NXT_COLOR_V2_BLUE = _ev3.HT_NXT_COLOR_V2_BLUE
HT_NXT_COLOR_V2_WHITE = _ev3.HT_NXT_COLOR_V2_WHITE
HT_NXT_COLOR_V2_NORM = _ev3.HT_NXT_COLOR_V2_NORM
HT_NXT_COLOR_V2_ALL = _ev3.HT_NXT_COLOR_V2_ALL
HT_NXT_COLOR_V2_RAW = _ev3.HT_NXT_COLOR_V2_RAW
HT_NXT_EOPD_LONG = _ev3.HT_NXT_EOPD_LONG
HT_NXT_EOPD_SHORT = _ev3.HT_NXT_EOPD_SHORT
HT_NXT_FORCE_FORCE = _ev3.HT_NXT_FORCE_FORCE
HT_NXT_GYRO_GYRO = _ev3.HT_NXT_GYRO_GYRO
HT_NXT_IR_LINK_IRLINK = _ev3.HT_NXT_IR_LINK_IRLINK
HT_NXT_IR_RECEIVER_1_MOTOR = _ev3.HT_NXT_IR_RECEIVER_1_MOTOR
HT_NXT_IR_RECEIVER_8_MOTOR = _ev3.HT_NXT_IR_RECEIVER_8_MOTOR
HT_NXT_PIR_PROX = _ev3.HT_NXT_PIR_PROX
HT_NXT_COMPASS_COMPASS = _ev3.HT_NXT_COMPASS_COMPASS
HT_NXT_MAG_MAG = _ev3.HT_NXT_MAG_MAG
HT_NXT_IR_SEEK_V2_DC = _ev3.HT_NXT_IR_SEEK_V2_DC
HT_NXT_IR_SEEK_V2_AC = _ev3.HT_NXT_IR_SEEK_V2_AC
HT_NXT_IR_SEEK_V2_DC_ALL = _ev3.HT_NXT_IR_SEEK_V2_DC_ALL
HT_NXT_IR_SEEK_V2_AC_ALL = _ev3.HT_NXT_IR_SEEK_V2_AC_ALL
HT_NXT_SMUX_MUX = _ev3.HT_NXT_SMUX_MUX
HT_SUPER_PRO_AIN = _ev3.HT_SUPER_PRO_AIN
HT_SUPER_PRO_DIN = _ev3.HT_SUPER_PRO_DIN
HT_SUPER_PRO_DOUT = _ev3.HT_SUPER_PRO_DOUT
HT_SUPER_PRO_DCTRL = _ev3.HT_SUPER_PRO_DCTRL
HT_SUPER_PRO_STROBE = _ev3.HT_SUPER_PRO_STROBE
HT_SUPER_PRO_LED = _ev3.HT_SUPER_PRO_LED
HT_SUPER_PRO_AOUT_0 = _ev3.HT_SUPER_PRO_AOUT_0
HT_SUPER_PRO_AOUT_1 = _ev3.HT_SUPER_PRO_AOUT_1
LEGO_EV3_US_US_DIST_CM = _ev3.LEGO_EV3_US_US_DIST_CM
US_US_DIST_CM = _ev3.US_US_DIST_CM
LEGO_EV3_US_US_DIST_IN = _ev3.LEGO_EV3_US_US_DIST_IN
US_US_DIST_IN = _ev3.US_US_DIST_IN
LEGO_EV3_US_US_LISTEN = _ev3.LEGO_EV3_US_US_LISTEN
US_US_LISTEN = _ev3.US_US_LISTEN
LEGO_EV3_US_US_SI_CM = _ev3.LEGO_EV3_US_US_SI_CM
US_US_SI_CM = _ev3.US_US_SI_CM
LEGO_EV3_US_US_SI_IN = _ev3.LEGO_EV3_US_US_SI_IN
US_US_SI_IN = _ev3.US_US_SI_IN
LEGO_EV3_US_US_DC_CM = _ev3.LEGO_EV3_US_US_DC_CM
US_US_DC_CM = _ev3.US_US_DC_CM
LEGO_EV3_US_US_DC_IN = _ev3.LEGO_EV3_US_US_DC_IN
US_US_DC_IN = _ev3.US_US_DC_IN
LEGO_EV3_GYRO_GYRO_ANG = _ev3.LEGO_EV3_GYRO_GYRO_ANG
GYRO_GYRO_ANG = _ev3.GYRO_GYRO_ANG
LEGO_EV3_GYRO_GYRO_RATE = _ev3.LEGO_EV3_GYRO_GYRO_RATE
GYRO_GYRO_RATE = _ev3.GYRO_GYRO_RATE
LEGO_EV3_GYRO_GYRO_FAS = _ev3.LEGO_EV3_GYRO_GYRO_FAS
GYRO_GYRO_FAS = _ev3.GYRO_GYRO_FAS
LEGO_EV3_GYRO_GYRO_G_AND_A = _ev3.LEGO_EV3_GYRO_GYRO_G_AND_A
GYRO_GYRO_G_AND_A = _ev3.GYRO_GYRO_G_AND_A
LEGO_EV3_GYRO_GYRO_CAL = _ev3.LEGO_EV3_GYRO_GYRO_CAL
GYRO_GYRO_CAL = _ev3.GYRO_GYRO_CAL
LEGO_EV3_COLOR_COL_REFLECT = _ev3.LEGO_EV3_COLOR_COL_REFLECT
COLOR_COL_REFLECT = _ev3.COLOR_COL_REFLECT
LEGO_EV3_COLOR_COL_AMBIENT = _ev3.LEGO_EV3_COLOR_COL_AMBIENT
COLOR_COL_AMBIENT = _ev3.COLOR_COL_AMBIENT
LEGO_EV3_COLOR_COL_COLOR = _ev3.LEGO_EV3_COLOR_COL_COLOR
COLOR_COL_COLOR = _ev3.COLOR_COL_COLOR
LEGO_EV3_COLOR_REF_RAW = _ev3.LEGO_EV3_COLOR_REF_RAW
COLOR_REF_RAW = _ev3.COLOR_REF_RAW
LEGO_EV3_COLOR_RGB_RAW = _ev3.LEGO_EV3_COLOR_RGB_RAW
COLOR_RGB_RAW = _ev3.COLOR_RGB_RAW
LEGO_EV3_COLOR_COL_CAL = _ev3.LEGO_EV3_COLOR_COL_CAL
COLOR_COL_CAL = _ev3.COLOR_COL_CAL
LEGO_EV3_TOUCH_TOUCH = _ev3.LEGO_EV3_TOUCH_TOUCH
TOUCH_TOUCH = _ev3.TOUCH_TOUCH
LEGO_EV3_IR_IR_PROX = _ev3.LEGO_EV3_IR_IR_PROX
IR_IR_PROX = _ev3.IR_IR_PROX
LEGO_EV3_IR_IR_SEEK = _ev3.LEGO_EV3_IR_IR_SEEK
IR_IR_SEEK = _ev3.IR_IR_SEEK
LEGO_EV3_IR_IR_REMOTE = _ev3.LEGO_EV3_IR_IR_REMOTE
IR_IR_REMOTE = _ev3.IR_IR_REMOTE
LEGO_EV3_IR_IR_REM_A = _ev3.LEGO_EV3_IR_IR_REM_A
IR_IR_REM_A = _ev3.IR_IR_REM_A
LEGO_EV3_IR_IR_S_ALT = _ev3.LEGO_EV3_IR_IR_S_ALT
IR_IR_S_ALT = _ev3.IR_IR_S_ALT
LEGO_EV3_IR_IR_CAL = _ev3.LEGO_EV3_IR_IR_CAL
IR_IR_CAL = _ev3.IR_IR_CAL
WEDO_HUB_HUB = _ev3.WEDO_HUB_HUB
WEDO_MOTION_PROX = _ev3.WEDO_MOTION_PROX
WEDO_MOTION_RAW = _ev3.WEDO_MOTION_RAW
WEDO_TILT_TILT = _ev3.WEDO_TILT_TILT
WEDO_TILT_TILT_AXIS = _ev3.WEDO_TILT_TILT_AXIS
WEDO_TILT_RAW = _ev3.WEDO_TILT_RAW
LEGO_POWER_STORAGE_IN_VOLT = _ev3.LEGO_POWER_STORAGE_IN_VOLT
LEGO_POWER_STORAGE_IN_AMP = _ev3.LEGO_POWER_STORAGE_IN_AMP
LEGO_POWER_STORAGE_OUT_VOLT = _ev3.LEGO_POWER_STORAGE_OUT_VOLT
LEGO_POWER_STORAGE_OUT_AMP = _ev3.LEGO_POWER_STORAGE_OUT_AMP
LEGO_POWER_STORAGE_JOULE = _ev3.LEGO_POWER_STORAGE_JOULE
LEGO_POWER_STORAGE_IN_WATT = _ev3.LEGO_POWER_STORAGE_IN_WATT
LEGO_POWER_STORAGE_OUT_WATT = _ev3.LEGO_POWER_STORAGE_OUT_WATT
LEGO_POWER_STORAGE_ALL = _ev3.LEGO_POWER_STORAGE_ALL
LEGO_NXT_TEMP_NXT_TEMP_C = _ev3.LEGO_NXT_TEMP_NXT_TEMP_C
LEGO_NXT_TEMP_NXT_TEMP_F = _ev3.LEGO_NXT_TEMP_NXT_TEMP_F
LEGO_NXT_TOUCH_TOUCH = _ev3.LEGO_NXT_TOUCH_TOUCH
LEGO_NXT_LIGHT_REFLECT = _ev3.LEGO_NXT_LIGHT_REFLECT
LEGO_NXT_LIGHT_AMBIENT = _ev3.LEGO_NXT_LIGHT_AMBIENT
LEGO_NXT_SOUND_DB = _ev3.LEGO_NXT_SOUND_DB
LEGO_NXT_SOUND_DBA = _ev3.LEGO_NXT_SOUND_DBA
LEGO_NXT_US_US_DIST_CM = _ev3.LEGO_NXT_US_US_DIST_CM
LEGO_NXT_US_US_DIST_IN = _ev3.LEGO_NXT_US_US_DIST_IN
LEGO_NXT_US_US_SI_CM = _ev3.LEGO_NXT_US_US_SI_CM
LEGO_NXT_US_US_SI_IN = _ev3.LEGO_NXT_US_US_SI_IN
LEGO_NXT_US_US_LISTEN = _ev3.LEGO_NXT_US_US_LISTEN
MI_XG1300L_ANGLE = _ev3.MI_XG1300L_ANGLE
MI_XG1300L_SPEED = _ev3.MI_XG1300L_SPEED
MI_XG1300L_ACCEL = _ev3.MI_XG1300L_ACCEL
MI_XG1300L_ALL = _ev3.MI_XG1300L_ALL
MS_ABSOLUTE_IMU_TILT = _ev3.MS_ABSOLUTE_IMU_TILT
MS_ABSOLUTE_IMU_ACCEL = _ev3.MS_ABSOLUTE_IMU_ACCEL
MS_ABSOLUTE_IMU_COMPASS = _ev3.MS_ABSOLUTE_IMU_COMPASS
MS_ABSOLUTE_IMU_MAG = _ev3.MS_ABSOLUTE_IMU_MAG
MS_ABSOLUTE_IMU_GYRO = _ev3.MS_ABSOLUTE_IMU_GYRO
MS_ABSOLUTE_IMU_ALL = _ev3.MS_ABSOLUTE_IMU_ALL
MS_ANGLE_ANGLE = _ev3.MS_ANGLE_ANGLE
MS_ANGLE_ANGLE2 = _ev3.MS_ANGLE_ANGLE2
MS_ANGLE_SPEED = _ev3.MS_ANGLE_SPEED
MS_ANGLE_ALL = _ev3.MS_ANGLE_ALL
MS_EV3_SMUX_MUX = _ev3.MS_EV3_SMUX_MUX
MS_LIGHT_ARRAY_CAL = _ev3.MS_LIGHT_ARRAY_CAL
MS_LIGHT_ARRAY_RAW = _ev3.MS_LIGHT_ARRAY_RAW
MS_LINE_LEADER_PID = _ev3.MS_LINE_LEADER_PID
MS_LINE_LEADER_PID_ALL = _ev3.MS_LINE_LEADER_PID_ALL
MS_LINE_LEADER_CAL = _ev3.MS_LINE_LEADER_CAL
MS_LINE_LEADER_RAW = _ev3.MS_LINE_LEADER_RAW
MS_NXTCAM_TRACK = _ev3.MS_NXTCAM_TRACK
MS_NXTMMX_STATUS = _ev3.MS_NXTMMX_STATUS
MS_NXTMMX_STATUS_OLD = _ev3.MS_NXTMMX_STATUS_OLD
MS_8CH_SERVO_V3 = _ev3.MS_8CH_SERVO_V3
MS_8CH_SERVO_OLD = _ev3.MS_8CH_SERVO_OLD
MS_PPS58_NX_RAW = _ev3.MS_PPS58_NX_RAW
MS_PPS58_NX_ABS_PSI = _ev3.MS_PPS58_NX_ABS_PSI
MS_PPS58_NX_ABS_MBAR = _ev3.MS_PPS58_NX_ABS_MBAR
MS_PPS58_NX_ABS_KPA = _ev3.MS_PPS58_NX_ABS_KPA
MS_PPS58_NX_REL_PSI = _ev3.MS_PPS58_NX_REL_PSI
MS_PPS58_NX_REL_MBAR = _ev3.MS_PPS58_NX_REL_MBAR
MS_PPS58_NX_REL_KPA = _ev3.MS_PPS58_NX_REL_KPA
MS_PIXY_ADAPTER_TRACK = _ev3.MS_PIXY_ADAPTER_TRACK
MS_NXT_TOUCH_MUX_TOUCH_MUX = _ev3.MS_NXT_TOUCH_MUX_TOUCH_MUX
SENSOR_MODE__COUNT_ = _ev3.SENSOR_MODE__COUNT_
SENSOR_MODE__UNKNOWN_ = _ev3.SENSOR_MODE__UNKNOWN_
SENSOR_COMMAND__NONE_ = _ev3.SENSOR_COMMAND__NONE_
HT_NXT_ANGLE_RESET = _ev3.HT_NXT_ANGLE_RESET
HT_NXT_ANGLE_CAL = _ev3.HT_NXT_ANGLE_CAL
HT_NXT_SMUX_HALT = _ev3.HT_NXT_SMUX_HALT
HT_NXT_SMUX_DETECT = _ev3.HT_NXT_SMUX_DETECT
HT_NXT_SMUX_RUN = _ev3.HT_NXT_SMUX_RUN
WEDO_HUB_OUT_OFF = _ev3.WEDO_HUB_OUT_OFF
WEDO_HUB_OUT_ON = _ev3.WEDO_HUB_OUT_ON
WEDO_HUB_CLEAR_ERR = _ev3.WEDO_HUB_CLEAR_ERR
MI_XG1300L_RESET = _ev3.MI_XG1300L_RESET
MI_XG1300L_ACCEL_2G = _ev3.MI_XG1300L_ACCEL_2G
MI_XG1300L_ACCEL_4G = _ev3.MI_XG1300L_ACCEL_4G
MI_XG1300L_ACCEL_8G = _ev3.MI_XG1300L_ACCEL_8G
MS_ABSOLUTE_IMU_BEGIN_COMP_CAL = _ev3.MS_ABSOLUTE_IMU_BEGIN_COMP_CAL
MS_ABSOLUTE_IMU_END_COMP_CAL = _ev3.MS_ABSOLUTE_IMU_END_COMP_CAL
MS_ABSOLUTE_IMU_ACCEL_2G = _ev3.MS_ABSOLUTE_IMU_ACCEL_2G
MS_ABSOLUTE_IMU_ACCEL_4G = _ev3.MS_ABSOLUTE_IMU_ACCEL_4G
MS_ABSOLUTE_IMU_ACCEL_8G = _ev3.MS_ABSOLUTE_IMU_ACCEL_8G
MS_ABSOLUTE_IMU_ACCEL_16G = _ev3.MS_ABSOLUTE_IMU_ACCEL_16G
MS_ANGLE_RESET = _ev3.MS_ANGLE_RESET
MS_LIGHT_ARRAY_CAL_WHITE = _ev3.MS_LIGHT_ARRAY_CAL_WHITE
MS_LIGHT_ARRAY_CAL_BLACK = _ev3.MS_LIGHT_ARRAY_CAL_BLACK
MS_LIGHT_ARRAY_SLEEP = _ev3.MS_LIGHT_ARRAY_SLEEP
MS_LIGHT_ARRAY_WAKE = _ev3.MS_LIGHT_ARRAY_WAKE
MS_LIGHT_ARRAY_60HZ = _ev3.MS_LIGHT_ARRAY_60HZ
MS_LIGHT_ARRAY_50HZ = _ev3.MS_LIGHT_ARRAY_50HZ
MS_LIGHT_ARRAY_UNIVERSAL = _ev3.MS_LIGHT_ARRAY_UNIVERSAL
MS_LINE_LEADER_CAL_WHITE = _ev3.MS_LINE_LEADER_CAL_WHITE
MS_LINE_LEADER_CAL_BLACK = _ev3.MS_LINE_LEADER_CAL_BLACK
MS_LINE_LEADER_SLEEP = _ev3.MS_LINE_LEADER_SLEEP
MS_LINE_LEADER_WAKE = _ev3.MS_LINE_LEADER_WAKE
MS_LINE_LEADER_INV_COL = _ev3.MS_LINE_LEADER_INV_COL
MS_LINE_LEADER_RST_COL = _ev3.MS_LINE_LEADER_RST_COL
MS_LINE_LEADER_SNAP = _ev3.MS_LINE_LEADER_SNAP
MS_LINE_LEADER_60HZ = _ev3.MS_LINE_LEADER_60HZ
MS_LINE_LEADER_50HZ = _ev3.MS_LINE_LEADER_50HZ
MS_LINE_LEADER_UNIVERSAL = _ev3.MS_LINE_LEADER_UNIVERSAL
MS_NXTCAM_TRACK_ON = _ev3.MS_NXTCAM_TRACK_ON
MS_NXTCAM_TRACK_OFF = _ev3.MS_NXTCAM_TRACK_OFF
MS_NXTCAM_TRACK_OBJ = _ev3.MS_NXTCAM_TRACK_OBJ
MS_NXTCAM_TRACK_LINE = _ev3.MS_NXTCAM_TRACK_LINE
MS_NXTCAM_SORT_SIZE = _ev3.MS_NXTCAM_SORT_SIZE
MS_NXTCAM_SORT_COL = _ev3.MS_NXTCAM_SORT_COL
MS_PPS58_NX_ZERO = _ev3.MS_PPS58_NX_ZERO
MS_PIXY_ADAPTER_SORT_SIZE = _ev3.MS_PIXY_ADAPTER_SORT_SIZE
MS_PIXY_ADAPTER_SORT_COL = _ev3.MS_PIXY_ADAPTER_SORT_COL
SENSOR_COMMAND__COUNT_ = _ev3.SENSOR_COMMAND__COUNT_
SENSOR_COMMAND__UNKNOWN_ = _ev3.SENSOR_COMMAND__UNKNOWN_

def get_sensor_address(*args):
  return _ev3.get_sensor_address(*args)
get_sensor_address = _ev3.get_sensor_address

def get_sensor_bin_data(*args):
  return _ev3.get_sensor_bin_data(*args)
get_sensor_bin_data = _ev3.get_sensor_bin_data

def set_sensor_bin_data(*args):
  return _ev3.set_sensor_bin_data(*args)
set_sensor_bin_data = _ev3.set_sensor_bin_data

def multi_set_sensor_bin_data(*args):
  return _ev3.multi_set_sensor_bin_data(*args)
multi_set_sensor_bin_data = _ev3.multi_set_sensor_bin_data

def get_sensor_bin_data_format(*args):
  return _ev3.get_sensor_bin_data_format(*args)
get_sensor_bin_data_format = _ev3.get_sensor_bin_data_format

def set_sensor_command(*args):
  return _ev3.set_sensor_command(*args)
set_sensor_command = _ev3.set_sensor_command

def multi_set_sensor_command(*args):
  return _ev3.multi_set_sensor_command(*args)
multi_set_sensor_command = _ev3.multi_set_sensor_command

def get_sensor_commands(*args):
  return _ev3.get_sensor_commands(*args)
get_sensor_commands = _ev3.get_sensor_commands

def get_sensor_direct(*args):
  return _ev3.get_sensor_direct(*args)
get_sensor_direct = _ev3.get_sensor_direct

def set_sensor_direct(*args):
  return _ev3.set_sensor_direct(*args)
set_sensor_direct = _ev3.set_sensor_direct

def multi_set_sensor_direct(*args):
  return _ev3.multi_set_sensor_direct(*args)
multi_set_sensor_direct = _ev3.multi_set_sensor_direct

def get_sensor_decimals(*args):
  return _ev3.get_sensor_decimals(*args)
get_sensor_decimals = _ev3.get_sensor_decimals

def get_sensor_driver_name(*args):
  return _ev3.get_sensor_driver_name(*args)
get_sensor_driver_name = _ev3.get_sensor_driver_name

def get_sensor_fw_version(*args):
  return _ev3.get_sensor_fw_version(*args)
get_sensor_fw_version = _ev3.get_sensor_fw_version

def get_sensor_mode(*args):
  return _ev3.get_sensor_mode(*args)
get_sensor_mode = _ev3.get_sensor_mode

def set_sensor_mode(*args):
  return _ev3.set_sensor_mode(*args)
set_sensor_mode = _ev3.set_sensor_mode

def multi_set_sensor_mode(*args):
  return _ev3.multi_set_sensor_mode(*args)
multi_set_sensor_mode = _ev3.multi_set_sensor_mode

def get_sensor_modes(*args):
  return _ev3.get_sensor_modes(*args)
get_sensor_modes = _ev3.get_sensor_modes

def get_sensor_num_values(*args):
  return _ev3.get_sensor_num_values(*args)
get_sensor_num_values = _ev3.get_sensor_num_values

def get_sensor_poll_ms(*args):
  return _ev3.get_sensor_poll_ms(*args)
get_sensor_poll_ms = _ev3.get_sensor_poll_ms

def set_sensor_poll_ms(*args):
  return _ev3.set_sensor_poll_ms(*args)
set_sensor_poll_ms = _ev3.set_sensor_poll_ms

def multi_set_sensor_poll_ms(*args):
  return _ev3.multi_set_sensor_poll_ms(*args)
multi_set_sensor_poll_ms = _ev3.multi_set_sensor_poll_ms

def get_sensor_units(*args):
  return _ev3.get_sensor_units(*args)
get_sensor_units = _ev3.get_sensor_units

def get_sensor_value0(*args):
  return _ev3.get_sensor_value0(*args)
get_sensor_value0 = _ev3.get_sensor_value0

def get_sensor_value1(*args):
  return _ev3.get_sensor_value1(*args)
get_sensor_value1 = _ev3.get_sensor_value1

def get_sensor_value2(*args):
  return _ev3.get_sensor_value2(*args)
get_sensor_value2 = _ev3.get_sensor_value2

def get_sensor_value3(*args):
  return _ev3.get_sensor_value3(*args)
get_sensor_value3 = _ev3.get_sensor_value3

def get_sensor_value4(*args):
  return _ev3.get_sensor_value4(*args)
get_sensor_value4 = _ev3.get_sensor_value4

def get_sensor_value5(*args):
  return _ev3.get_sensor_value5(*args)
get_sensor_value5 = _ev3.get_sensor_value5

def get_sensor_value6(*args):
  return _ev3.get_sensor_value6(*args)
get_sensor_value6 = _ev3.get_sensor_value6

def get_sensor_value7(*args):
  return _ev3.get_sensor_value7(*args)
get_sensor_value7 = _ev3.get_sensor_value7

def get_sensor_text_value(*args):
  return _ev3.get_sensor_text_value(*args)
get_sensor_text_value = _ev3.get_sensor_text_value

def get_sensor_value(*args):
  return _ev3.get_sensor_value(*args)
get_sensor_value = _ev3.get_sensor_value

def ev3_sensor_type(*args):
  return _ev3.ev3_sensor_type(*args)
ev3_sensor_type = _ev3.ev3_sensor_type

def get_sensor_type_inx(*args):
  return _ev3.get_sensor_type_inx(*args)
get_sensor_type_inx = _ev3.get_sensor_type_inx

def get_sensor_desc(*args):
  return _ev3.get_sensor_desc(*args)
get_sensor_desc = _ev3.get_sensor_desc

def ev3_sensor_desc(*args):
  return _ev3.ev3_sensor_desc(*args)
ev3_sensor_desc = _ev3.ev3_sensor_desc

def ev3_sensor_desc_type_inx(*args):
  return _ev3.ev3_sensor_desc_type_inx(*args)
ev3_sensor_desc_type_inx = _ev3.ev3_sensor_desc_type_inx

def ev3_sensor_desc_port(*args):
  return _ev3.ev3_sensor_desc_port(*args)
ev3_sensor_desc_port = _ev3.ev3_sensor_desc_port

def ev3_sensor_desc_extport(*args):
  return _ev3.ev3_sensor_desc_extport(*args)
ev3_sensor_desc_extport = _ev3.ev3_sensor_desc_extport

def ev3_sensor_desc_addr(*args):
  return _ev3.ev3_sensor_desc_addr(*args)
ev3_sensor_desc_addr = _ev3.ev3_sensor_desc_addr

def ev3_sensor_port_name(*args):
  return _ev3.ev3_sensor_port_name(*args)
ev3_sensor_port_name = _ev3.ev3_sensor_port_name

def ev3_search_sensor(*args):
  return _ev3.ev3_search_sensor(*args)
ev3_search_sensor = _ev3.ev3_search_sensor

def ev3_search_sensor_plugged_in(*args):
  return _ev3.ev3_search_sensor_plugged_in(*args)
ev3_search_sensor_plugged_in = _ev3.ev3_search_sensor_plugged_in

def ev3_sensor_mode(*args):
  return _ev3.ev3_sensor_mode(*args)
ev3_sensor_mode = _ev3.ev3_sensor_mode

def get_sensor_mode_inx_of_type(*args):
  return _ev3.get_sensor_mode_inx_of_type(*args)
get_sensor_mode_inx_of_type = _ev3.get_sensor_mode_inx_of_type

def get_sensor_mode_inx(*args):
  return _ev3.get_sensor_mode_inx(*args)
get_sensor_mode_inx = _ev3.get_sensor_mode_inx

def set_sensor_mode_inx(*args):
  return _ev3.set_sensor_mode_inx(*args)
set_sensor_mode_inx = _ev3.set_sensor_mode_inx

def multi_set_sensor_mode_inx(*args):
  return _ev3.multi_set_sensor_mode_inx(*args)
multi_set_sensor_mode_inx = _ev3.multi_set_sensor_mode_inx

def ev3_sensor_command(*args):
  return _ev3.ev3_sensor_command(*args)
ev3_sensor_command = _ev3.ev3_sensor_command

def set_sensor_command_inx(*args):
  return _ev3.set_sensor_command_inx(*args)
set_sensor_command_inx = _ev3.set_sensor_command_inx

def multi_set_sensor_command_inx(*args):
  return _ev3.multi_set_sensor_command_inx(*args)
multi_set_sensor_command_inx = _ev3.multi_set_sensor_command_inx

def ev3_sensor_init():
  return _ev3.ev3_sensor_init()
ev3_sensor_init = _ev3.ev3_sensor_init
IR_REMOTE__NONE_ = _ev3.IR_REMOTE__NONE_
RED_UP = _ev3.RED_UP
RED_DOWN = _ev3.RED_DOWN
BLUE_UP = _ev3.BLUE_UP
BLUE_DOWN = _ev3.BLUE_DOWN
RED_UP_BLUE_UP = _ev3.RED_UP_BLUE_UP
RED_UP_BLUE_DOWN = _ev3.RED_UP_BLUE_DOWN
RED_DOWN_BLUE_UP = _ev3.RED_DOWN_BLUE_UP
RED_DOWN_BLUE_DOWN = _ev3.RED_DOWN_BLUE_DOWN
BEACON_MODE_ON = _ev3.BEACON_MODE_ON
RED_UP_RED_DOWN = _ev3.RED_UP_RED_DOWN
BLUE_UP_BLUE_DOWN = _ev3.BLUE_UP_BLUE_DOWN
TACHO_DIR = _ev3.TACHO_DIR
class EV3_TACHO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EV3_TACHO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EV3_TACHO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_inx"] = _ev3.EV3_TACHO_type_inx_set
    __swig_getmethods__["type_inx"] = _ev3.EV3_TACHO_type_inx_get
    if _newclass:type_inx = _swig_property(_ev3.EV3_TACHO_type_inx_get, _ev3.EV3_TACHO_type_inx_set)
    __swig_setmethods__["port"] = _ev3.EV3_TACHO_port_set
    __swig_getmethods__["port"] = _ev3.EV3_TACHO_port_get
    if _newclass:port = _swig_property(_ev3.EV3_TACHO_port_get, _ev3.EV3_TACHO_port_set)
    __swig_setmethods__["extport"] = _ev3.EV3_TACHO_extport_set
    __swig_getmethods__["extport"] = _ev3.EV3_TACHO_extport_get
    if _newclass:extport = _swig_property(_ev3.EV3_TACHO_extport_get, _ev3.EV3_TACHO_extport_set)
    def __init__(self): 
        this = _ev3.new_EV3_TACHO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ev3.delete_EV3_TACHO
    __del__ = lambda self : None;
EV3_TACHO_swigregister = _ev3.EV3_TACHO_swigregister
EV3_TACHO_swigregister(EV3_TACHO)

TACHO_DESC__LIMIT_ = _ev3.TACHO_DESC__LIMIT_
TACHO__NONE_ = _ev3.TACHO__NONE_
TACHO_TYPE__NONE_ = _ev3.TACHO_TYPE__NONE_
LEGO_EV3_L_MOTOR = _ev3.LEGO_EV3_L_MOTOR
LEGO_EV3_M_MOTOR = _ev3.LEGO_EV3_M_MOTOR
FI_L12_EV3 = _ev3.FI_L12_EV3
TACHO_TYPE__COUNT_ = _ev3.TACHO_TYPE__COUNT_
TACHO_TYPE__UNKNOWN_ = _ev3.TACHO_TYPE__UNKNOWN_
TACHO_COMMAND__NONE_ = _ev3.TACHO_COMMAND__NONE_
TACHO_RUN_FOREVER = _ev3.TACHO_RUN_FOREVER
TACHO_RUN_TO_ABS_POS = _ev3.TACHO_RUN_TO_ABS_POS
TACHO_RUN_TO_REL_POS = _ev3.TACHO_RUN_TO_REL_POS
TACHO_RUN_TIMED = _ev3.TACHO_RUN_TIMED
TACHO_RUN_DIRECT = _ev3.TACHO_RUN_DIRECT
TACHO_STOP = _ev3.TACHO_STOP
TACHO_RESET = _ev3.TACHO_RESET
TACHO_COMMAND__COUNT_ = _ev3.TACHO_COMMAND__COUNT_
TACHO_COMMAND__UNKNOWN_ = _ev3.TACHO_COMMAND__UNKNOWN_
TACHO_POLARITY__NONE_ = _ev3.TACHO_POLARITY__NONE_
TACHO_NORMAL = _ev3.TACHO_NORMAL
TACHO_INVERSED = _ev3.TACHO_INVERSED
TACHO_POLARITY__COUNT_ = _ev3.TACHO_POLARITY__COUNT_
TACHO_POLARITY__UNKNOWN_ = _ev3.TACHO_POLARITY__UNKNOWN_
TACHO_STOP_ACTION__NONE_ = _ev3.TACHO_STOP_ACTION__NONE_
TACHO_COAST = _ev3.TACHO_COAST
TACHO_BRAKE = _ev3.TACHO_BRAKE
TACHO_HOLD = _ev3.TACHO_HOLD
TACHO_STOP_ACTION__COUNT_ = _ev3.TACHO_STOP_ACTION__COUNT_
TACHO_STOP_ACTION__UNKNOWN_ = _ev3.TACHO_STOP_ACTION__UNKNOWN_
TACHO_STATE__NONE_ = _ev3.TACHO_STATE__NONE_
TACHO_RUNNING = _ev3.TACHO_RUNNING
TACHO_RAMPING = _ev3.TACHO_RAMPING
TACHO_HOLDING = _ev3.TACHO_HOLDING
TACHO_OVERLOADED = _ev3.TACHO_OVERLOADED
TACHO_STALLED = _ev3.TACHO_STALLED

def get_tacho_address(*args):
  return _ev3.get_tacho_address(*args)
get_tacho_address = _ev3.get_tacho_address

def set_tacho_command(*args):
  return _ev3.set_tacho_command(*args)
set_tacho_command = _ev3.set_tacho_command

def multi_set_tacho_command(*args):
  return _ev3.multi_set_tacho_command(*args)
multi_set_tacho_command = _ev3.multi_set_tacho_command

def get_tacho_commands(*args):
  return _ev3.get_tacho_commands(*args)
get_tacho_commands = _ev3.get_tacho_commands

def get_tacho_count_per_rot(*args):
  return _ev3.get_tacho_count_per_rot(*args)
get_tacho_count_per_rot = _ev3.get_tacho_count_per_rot

def get_tacho_count_per_m(*args):
  return _ev3.get_tacho_count_per_m(*args)
get_tacho_count_per_m = _ev3.get_tacho_count_per_m

def get_tacho_full_travel_count(*args):
  return _ev3.get_tacho_full_travel_count(*args)
get_tacho_full_travel_count = _ev3.get_tacho_full_travel_count

def get_tacho_driver_name(*args):
  return _ev3.get_tacho_driver_name(*args)
get_tacho_driver_name = _ev3.get_tacho_driver_name

def get_tacho_duty_cycle(*args):
  return _ev3.get_tacho_duty_cycle(*args)
get_tacho_duty_cycle = _ev3.get_tacho_duty_cycle

def get_tacho_duty_cycle_sp(*args):
  return _ev3.get_tacho_duty_cycle_sp(*args)
get_tacho_duty_cycle_sp = _ev3.get_tacho_duty_cycle_sp

def set_tacho_duty_cycle_sp(*args):
  return _ev3.set_tacho_duty_cycle_sp(*args)
set_tacho_duty_cycle_sp = _ev3.set_tacho_duty_cycle_sp

def multi_set_tacho_duty_cycle_sp(*args):
  return _ev3.multi_set_tacho_duty_cycle_sp(*args)
multi_set_tacho_duty_cycle_sp = _ev3.multi_set_tacho_duty_cycle_sp

def get_tacho_hold_pid_Kd(*args):
  return _ev3.get_tacho_hold_pid_Kd(*args)
get_tacho_hold_pid_Kd = _ev3.get_tacho_hold_pid_Kd

def set_tacho_hold_pid_Kd(*args):
  return _ev3.set_tacho_hold_pid_Kd(*args)
set_tacho_hold_pid_Kd = _ev3.set_tacho_hold_pid_Kd

def multi_set_tacho_hold_pid_Kd(*args):
  return _ev3.multi_set_tacho_hold_pid_Kd(*args)
multi_set_tacho_hold_pid_Kd = _ev3.multi_set_tacho_hold_pid_Kd

def get_tacho_hold_pid_Ki(*args):
  return _ev3.get_tacho_hold_pid_Ki(*args)
get_tacho_hold_pid_Ki = _ev3.get_tacho_hold_pid_Ki

def set_tacho_hold_pid_Ki(*args):
  return _ev3.set_tacho_hold_pid_Ki(*args)
set_tacho_hold_pid_Ki = _ev3.set_tacho_hold_pid_Ki

def multi_set_tacho_hold_pid_Ki(*args):
  return _ev3.multi_set_tacho_hold_pid_Ki(*args)
multi_set_tacho_hold_pid_Ki = _ev3.multi_set_tacho_hold_pid_Ki

def get_tacho_hold_pid_Kp(*args):
  return _ev3.get_tacho_hold_pid_Kp(*args)
get_tacho_hold_pid_Kp = _ev3.get_tacho_hold_pid_Kp

def set_tacho_hold_pid_Kp(*args):
  return _ev3.set_tacho_hold_pid_Kp(*args)
set_tacho_hold_pid_Kp = _ev3.set_tacho_hold_pid_Kp

def multi_set_tacho_hold_pid_Kp(*args):
  return _ev3.multi_set_tacho_hold_pid_Kp(*args)
multi_set_tacho_hold_pid_Kp = _ev3.multi_set_tacho_hold_pid_Kp

def get_tacho_max_speed(*args):
  return _ev3.get_tacho_max_speed(*args)
get_tacho_max_speed = _ev3.get_tacho_max_speed

def get_tacho_polarity(*args):
  return _ev3.get_tacho_polarity(*args)
get_tacho_polarity = _ev3.get_tacho_polarity

def set_tacho_polarity(*args):
  return _ev3.set_tacho_polarity(*args)
set_tacho_polarity = _ev3.set_tacho_polarity

def multi_set_tacho_polarity(*args):
  return _ev3.multi_set_tacho_polarity(*args)
multi_set_tacho_polarity = _ev3.multi_set_tacho_polarity

def get_tacho_position(*args):
  return _ev3.get_tacho_position(*args)
get_tacho_position = _ev3.get_tacho_position

def set_tacho_position(*args):
  return _ev3.set_tacho_position(*args)
set_tacho_position = _ev3.set_tacho_position

def multi_set_tacho_position(*args):
  return _ev3.multi_set_tacho_position(*args)
multi_set_tacho_position = _ev3.multi_set_tacho_position

def get_tacho_position_sp(*args):
  return _ev3.get_tacho_position_sp(*args)
get_tacho_position_sp = _ev3.get_tacho_position_sp

def set_tacho_position_sp(*args):
  return _ev3.set_tacho_position_sp(*args)
set_tacho_position_sp = _ev3.set_tacho_position_sp

def multi_set_tacho_position_sp(*args):
  return _ev3.multi_set_tacho_position_sp(*args)
multi_set_tacho_position_sp = _ev3.multi_set_tacho_position_sp

def get_tacho_ramp_down_sp(*args):
  return _ev3.get_tacho_ramp_down_sp(*args)
get_tacho_ramp_down_sp = _ev3.get_tacho_ramp_down_sp

def set_tacho_ramp_down_sp(*args):
  return _ev3.set_tacho_ramp_down_sp(*args)
set_tacho_ramp_down_sp = _ev3.set_tacho_ramp_down_sp

def multi_set_tacho_ramp_down_sp(*args):
  return _ev3.multi_set_tacho_ramp_down_sp(*args)
multi_set_tacho_ramp_down_sp = _ev3.multi_set_tacho_ramp_down_sp

def get_tacho_ramp_up_sp(*args):
  return _ev3.get_tacho_ramp_up_sp(*args)
get_tacho_ramp_up_sp = _ev3.get_tacho_ramp_up_sp

def set_tacho_ramp_up_sp(*args):
  return _ev3.set_tacho_ramp_up_sp(*args)
set_tacho_ramp_up_sp = _ev3.set_tacho_ramp_up_sp

def multi_set_tacho_ramp_up_sp(*args):
  return _ev3.multi_set_tacho_ramp_up_sp(*args)
multi_set_tacho_ramp_up_sp = _ev3.multi_set_tacho_ramp_up_sp

def get_tacho_speed(*args):
  return _ev3.get_tacho_speed(*args)
get_tacho_speed = _ev3.get_tacho_speed

def get_tacho_speed_pid_Kd(*args):
  return _ev3.get_tacho_speed_pid_Kd(*args)
get_tacho_speed_pid_Kd = _ev3.get_tacho_speed_pid_Kd

def set_tacho_speed_pid_Kd(*args):
  return _ev3.set_tacho_speed_pid_Kd(*args)
set_tacho_speed_pid_Kd = _ev3.set_tacho_speed_pid_Kd

def multi_set_tacho_speed_pid_Kd(*args):
  return _ev3.multi_set_tacho_speed_pid_Kd(*args)
multi_set_tacho_speed_pid_Kd = _ev3.multi_set_tacho_speed_pid_Kd

def get_tacho_speed_pid_Ki(*args):
  return _ev3.get_tacho_speed_pid_Ki(*args)
get_tacho_speed_pid_Ki = _ev3.get_tacho_speed_pid_Ki

def set_tacho_speed_pid_Ki(*args):
  return _ev3.set_tacho_speed_pid_Ki(*args)
set_tacho_speed_pid_Ki = _ev3.set_tacho_speed_pid_Ki

def multi_set_tacho_speed_pid_Ki(*args):
  return _ev3.multi_set_tacho_speed_pid_Ki(*args)
multi_set_tacho_speed_pid_Ki = _ev3.multi_set_tacho_speed_pid_Ki

def get_tacho_speed_pid_Kp(*args):
  return _ev3.get_tacho_speed_pid_Kp(*args)
get_tacho_speed_pid_Kp = _ev3.get_tacho_speed_pid_Kp

def set_tacho_speed_pid_Kp(*args):
  return _ev3.set_tacho_speed_pid_Kp(*args)
set_tacho_speed_pid_Kp = _ev3.set_tacho_speed_pid_Kp

def multi_set_tacho_speed_pid_Kp(*args):
  return _ev3.multi_set_tacho_speed_pid_Kp(*args)
multi_set_tacho_speed_pid_Kp = _ev3.multi_set_tacho_speed_pid_Kp

def get_tacho_speed_sp(*args):
  return _ev3.get_tacho_speed_sp(*args)
get_tacho_speed_sp = _ev3.get_tacho_speed_sp

def set_tacho_speed_sp(*args):
  return _ev3.set_tacho_speed_sp(*args)
set_tacho_speed_sp = _ev3.set_tacho_speed_sp

def multi_set_tacho_speed_sp(*args):
  return _ev3.multi_set_tacho_speed_sp(*args)
multi_set_tacho_speed_sp = _ev3.multi_set_tacho_speed_sp

def get_tacho_state(*args):
  return _ev3.get_tacho_state(*args)
get_tacho_state = _ev3.get_tacho_state

def get_tacho_stop_action(*args):
  return _ev3.get_tacho_stop_action(*args)
get_tacho_stop_action = _ev3.get_tacho_stop_action

def set_tacho_stop_action(*args):
  return _ev3.set_tacho_stop_action(*args)
set_tacho_stop_action = _ev3.set_tacho_stop_action

def multi_set_tacho_stop_action(*args):
  return _ev3.multi_set_tacho_stop_action(*args)
multi_set_tacho_stop_action = _ev3.multi_set_tacho_stop_action

def get_tacho_stop_actions(*args):
  return _ev3.get_tacho_stop_actions(*args)
get_tacho_stop_actions = _ev3.get_tacho_stop_actions

def get_tacho_time_sp(*args):
  return _ev3.get_tacho_time_sp(*args)
get_tacho_time_sp = _ev3.get_tacho_time_sp

def set_tacho_time_sp(*args):
  return _ev3.set_tacho_time_sp(*args)
set_tacho_time_sp = _ev3.set_tacho_time_sp

def multi_set_tacho_time_sp(*args):
  return _ev3.multi_set_tacho_time_sp(*args)
multi_set_tacho_time_sp = _ev3.multi_set_tacho_time_sp

def ev3_tacho_type(*args):
  return _ev3.ev3_tacho_type(*args)
ev3_tacho_type = _ev3.ev3_tacho_type

def get_tacho_type_inx(*args):
  return _ev3.get_tacho_type_inx(*args)
get_tacho_type_inx = _ev3.get_tacho_type_inx

def get_tacho_desc(*args):
  return _ev3.get_tacho_desc(*args)
get_tacho_desc = _ev3.get_tacho_desc

def ev3_tacho_desc(*args):
  return _ev3.ev3_tacho_desc(*args)
ev3_tacho_desc = _ev3.ev3_tacho_desc

def ev3_tacho_desc_type_inx(*args):
  return _ev3.ev3_tacho_desc_type_inx(*args)
ev3_tacho_desc_type_inx = _ev3.ev3_tacho_desc_type_inx

def ev3_tacho_desc_port(*args):
  return _ev3.ev3_tacho_desc_port(*args)
ev3_tacho_desc_port = _ev3.ev3_tacho_desc_port

def ev3_tacho_desc_extport(*args):
  return _ev3.ev3_tacho_desc_extport(*args)
ev3_tacho_desc_extport = _ev3.ev3_tacho_desc_extport

def ev3_tacho_port_name(*args):
  return _ev3.ev3_tacho_port_name(*args)
ev3_tacho_port_name = _ev3.ev3_tacho_port_name

def ev3_search_tacho(*args):
  return _ev3.ev3_search_tacho(*args)
ev3_search_tacho = _ev3.ev3_search_tacho

def ev3_search_tacho_plugged_in(*args):
  return _ev3.ev3_search_tacho_plugged_in(*args)
ev3_search_tacho_plugged_in = _ev3.ev3_search_tacho_plugged_in

def ev3_tacho_command(*args):
  return _ev3.ev3_tacho_command(*args)
ev3_tacho_command = _ev3.ev3_tacho_command

def set_tacho_command_inx(*args):
  return _ev3.set_tacho_command_inx(*args)
set_tacho_command_inx = _ev3.set_tacho_command_inx

def multi_set_tacho_command_inx(*args):
  return _ev3.multi_set_tacho_command_inx(*args)
multi_set_tacho_command_inx = _ev3.multi_set_tacho_command_inx

def ev3_tacho_polarity(*args):
  return _ev3.ev3_tacho_polarity(*args)
ev3_tacho_polarity = _ev3.ev3_tacho_polarity

def get_tacho_polarity_inx(*args):
  return _ev3.get_tacho_polarity_inx(*args)
get_tacho_polarity_inx = _ev3.get_tacho_polarity_inx

def set_tacho_polarity_inx(*args):
  return _ev3.set_tacho_polarity_inx(*args)
set_tacho_polarity_inx = _ev3.set_tacho_polarity_inx

def multi_set_tacho_polarity_inx(*args):
  return _ev3.multi_set_tacho_polarity_inx(*args)
multi_set_tacho_polarity_inx = _ev3.multi_set_tacho_polarity_inx

def ev3_tacho_stop_action(*args):
  return _ev3.ev3_tacho_stop_action(*args)
ev3_tacho_stop_action = _ev3.ev3_tacho_stop_action

def get_tacho_stop_action_inx(*args):
  return _ev3.get_tacho_stop_action_inx(*args)
get_tacho_stop_action_inx = _ev3.get_tacho_stop_action_inx

def set_tacho_stop_action_inx(*args):
  return _ev3.set_tacho_stop_action_inx(*args)
set_tacho_stop_action_inx = _ev3.set_tacho_stop_action_inx

def multi_set_tacho_stop_action_inx(*args):
  return _ev3.multi_set_tacho_stop_action_inx(*args)
multi_set_tacho_stop_action_inx = _ev3.multi_set_tacho_stop_action_inx

def get_tacho_state_flags(*args):
  return _ev3.get_tacho_state_flags(*args)
get_tacho_state_flags = _ev3.get_tacho_state_flags

def ev3_tacho_init():
  return _ev3.ev3_tacho_init()
ev3_tacho_init = _ev3.ev3_tacho_init
DC_DIR = _ev3.DC_DIR
class EV3_DC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EV3_DC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EV3_DC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_inx"] = _ev3.EV3_DC_type_inx_set
    __swig_getmethods__["type_inx"] = _ev3.EV3_DC_type_inx_get
    if _newclass:type_inx = _swig_property(_ev3.EV3_DC_type_inx_get, _ev3.EV3_DC_type_inx_set)
    __swig_setmethods__["port"] = _ev3.EV3_DC_port_set
    __swig_getmethods__["port"] = _ev3.EV3_DC_port_get
    if _newclass:port = _swig_property(_ev3.EV3_DC_port_get, _ev3.EV3_DC_port_set)
    __swig_setmethods__["extport"] = _ev3.EV3_DC_extport_set
    __swig_getmethods__["extport"] = _ev3.EV3_DC_extport_get
    if _newclass:extport = _swig_property(_ev3.EV3_DC_extport_get, _ev3.EV3_DC_extport_set)
    def __init__(self): 
        this = _ev3.new_EV3_DC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ev3.delete_EV3_DC
    __del__ = lambda self : None;
EV3_DC_swigregister = _ev3.EV3_DC_swigregister
EV3_DC_swigregister(EV3_DC)

DC_DESC__LIMIT_ = _ev3.DC_DESC__LIMIT_
DC__NONE_ = _ev3.DC__NONE_
DC_TYPE__NONE_ = _ev3.DC_TYPE__NONE_
RCX_MOTOR = _ev3.RCX_MOTOR
DC_TYPE__COUNT_ = _ev3.DC_TYPE__COUNT_
DC_TYPE__UNKNOWN_ = _ev3.DC_TYPE__UNKNOWN_
DC_COMMAND__NONE_ = _ev3.DC_COMMAND__NONE_
DC_RUN_FOREVER = _ev3.DC_RUN_FOREVER
DC_RUN_TIMED = _ev3.DC_RUN_TIMED
DC_RUN_DIRECT = _ev3.DC_RUN_DIRECT
DC_STOP = _ev3.DC_STOP
DC_COMMAND__COUNT_ = _ev3.DC_COMMAND__COUNT_
DC_COMMAND__UNKNOWN_ = _ev3.DC_COMMAND__UNKNOWN_
DC_POLARITY__NONE_ = _ev3.DC_POLARITY__NONE_
DC_NORMAL = _ev3.DC_NORMAL
DC_INVERSED = _ev3.DC_INVERSED
DC_POLARITY__COUNT_ = _ev3.DC_POLARITY__COUNT_
DC_POLARITY__UNKNOWN_ = _ev3.DC_POLARITY__UNKNOWN_
DC_STOP_ACTION__NONE_ = _ev3.DC_STOP_ACTION__NONE_
DC_COAST = _ev3.DC_COAST
DC_BRAKE = _ev3.DC_BRAKE
DC_STOP_ACTION__COUNT_ = _ev3.DC_STOP_ACTION__COUNT_
DC_STOP_ACTION__UNKNOWN_ = _ev3.DC_STOP_ACTION__UNKNOWN_
DC_STATE__NONE_ = _ev3.DC_STATE__NONE_
DC_RUNNING = _ev3.DC_RUNNING
DC_RAMPING = _ev3.DC_RAMPING

def get_dc_address(*args):
  return _ev3.get_dc_address(*args)
get_dc_address = _ev3.get_dc_address

def set_dc_command(*args):
  return _ev3.set_dc_command(*args)
set_dc_command = _ev3.set_dc_command

def multi_set_dc_command(*args):
  return _ev3.multi_set_dc_command(*args)
multi_set_dc_command = _ev3.multi_set_dc_command

def get_dc_commands(*args):
  return _ev3.get_dc_commands(*args)
get_dc_commands = _ev3.get_dc_commands

def get_dc_driver_name(*args):
  return _ev3.get_dc_driver_name(*args)
get_dc_driver_name = _ev3.get_dc_driver_name

def get_dc_duty_cycle(*args):
  return _ev3.get_dc_duty_cycle(*args)
get_dc_duty_cycle = _ev3.get_dc_duty_cycle

def get_dc_duty_cycle_sp(*args):
  return _ev3.get_dc_duty_cycle_sp(*args)
get_dc_duty_cycle_sp = _ev3.get_dc_duty_cycle_sp

def set_dc_duty_cycle_sp(*args):
  return _ev3.set_dc_duty_cycle_sp(*args)
set_dc_duty_cycle_sp = _ev3.set_dc_duty_cycle_sp

def multi_set_dc_duty_cycle_sp(*args):
  return _ev3.multi_set_dc_duty_cycle_sp(*args)
multi_set_dc_duty_cycle_sp = _ev3.multi_set_dc_duty_cycle_sp

def get_dc_polarity(*args):
  return _ev3.get_dc_polarity(*args)
get_dc_polarity = _ev3.get_dc_polarity

def set_dc_polarity(*args):
  return _ev3.set_dc_polarity(*args)
set_dc_polarity = _ev3.set_dc_polarity

def multi_set_dc_polarity(*args):
  return _ev3.multi_set_dc_polarity(*args)
multi_set_dc_polarity = _ev3.multi_set_dc_polarity

def get_dc_state(*args):
  return _ev3.get_dc_state(*args)
get_dc_state = _ev3.get_dc_state

def set_dc_stop_action(*args):
  return _ev3.set_dc_stop_action(*args)
set_dc_stop_action = _ev3.set_dc_stop_action

def multi_set_dc_stop_action(*args):
  return _ev3.multi_set_dc_stop_action(*args)
multi_set_dc_stop_action = _ev3.multi_set_dc_stop_action

def get_dc_stop_actions(*args):
  return _ev3.get_dc_stop_actions(*args)
get_dc_stop_actions = _ev3.get_dc_stop_actions

def get_dc_ramp_down_sp(*args):
  return _ev3.get_dc_ramp_down_sp(*args)
get_dc_ramp_down_sp = _ev3.get_dc_ramp_down_sp

def set_dc_ramp_down_sp(*args):
  return _ev3.set_dc_ramp_down_sp(*args)
set_dc_ramp_down_sp = _ev3.set_dc_ramp_down_sp

def multi_set_dc_ramp_down_sp(*args):
  return _ev3.multi_set_dc_ramp_down_sp(*args)
multi_set_dc_ramp_down_sp = _ev3.multi_set_dc_ramp_down_sp

def get_dc_ramp_up_sp(*args):
  return _ev3.get_dc_ramp_up_sp(*args)
get_dc_ramp_up_sp = _ev3.get_dc_ramp_up_sp

def set_dc_ramp_up_sp(*args):
  return _ev3.set_dc_ramp_up_sp(*args)
set_dc_ramp_up_sp = _ev3.set_dc_ramp_up_sp

def multi_set_dc_ramp_up_sp(*args):
  return _ev3.multi_set_dc_ramp_up_sp(*args)
multi_set_dc_ramp_up_sp = _ev3.multi_set_dc_ramp_up_sp

def get_dc_time_sp(*args):
  return _ev3.get_dc_time_sp(*args)
get_dc_time_sp = _ev3.get_dc_time_sp

def set_dc_time_sp(*args):
  return _ev3.set_dc_time_sp(*args)
set_dc_time_sp = _ev3.set_dc_time_sp

def multi_set_dc_time_sp(*args):
  return _ev3.multi_set_dc_time_sp(*args)
multi_set_dc_time_sp = _ev3.multi_set_dc_time_sp

def ev3_dc_type(*args):
  return _ev3.ev3_dc_type(*args)
ev3_dc_type = _ev3.ev3_dc_type

def get_dc_type_inx(*args):
  return _ev3.get_dc_type_inx(*args)
get_dc_type_inx = _ev3.get_dc_type_inx

def get_dc_desc(*args):
  return _ev3.get_dc_desc(*args)
get_dc_desc = _ev3.get_dc_desc

def ev3_dc_desc(*args):
  return _ev3.ev3_dc_desc(*args)
ev3_dc_desc = _ev3.ev3_dc_desc

def ev3_dc_desc_type_inx(*args):
  return _ev3.ev3_dc_desc_type_inx(*args)
ev3_dc_desc_type_inx = _ev3.ev3_dc_desc_type_inx

def ev3_dc_desc_port(*args):
  return _ev3.ev3_dc_desc_port(*args)
ev3_dc_desc_port = _ev3.ev3_dc_desc_port

def ev3_dc_desc_extport(*args):
  return _ev3.ev3_dc_desc_extport(*args)
ev3_dc_desc_extport = _ev3.ev3_dc_desc_extport

def ev3_dc_port_name(*args):
  return _ev3.ev3_dc_port_name(*args)
ev3_dc_port_name = _ev3.ev3_dc_port_name

def ev3_search_dc(*args):
  return _ev3.ev3_search_dc(*args)
ev3_search_dc = _ev3.ev3_search_dc

def ev3_search_dc_plugged_in(*args):
  return _ev3.ev3_search_dc_plugged_in(*args)
ev3_search_dc_plugged_in = _ev3.ev3_search_dc_plugged_in

def ev3_dc_command(*args):
  return _ev3.ev3_dc_command(*args)
ev3_dc_command = _ev3.ev3_dc_command

def set_dc_command_inx(*args):
  return _ev3.set_dc_command_inx(*args)
set_dc_command_inx = _ev3.set_dc_command_inx

def multi_set_dc_command_inx(*args):
  return _ev3.multi_set_dc_command_inx(*args)
multi_set_dc_command_inx = _ev3.multi_set_dc_command_inx

def ev3_dc_polarity(*args):
  return _ev3.ev3_dc_polarity(*args)
ev3_dc_polarity = _ev3.ev3_dc_polarity

def get_dc_polarity_inx(*args):
  return _ev3.get_dc_polarity_inx(*args)
get_dc_polarity_inx = _ev3.get_dc_polarity_inx

def set_dc_polarity_inx(*args):
  return _ev3.set_dc_polarity_inx(*args)
set_dc_polarity_inx = _ev3.set_dc_polarity_inx

def multi_set_dc_polarity_inx(*args):
  return _ev3.multi_set_dc_polarity_inx(*args)
multi_set_dc_polarity_inx = _ev3.multi_set_dc_polarity_inx

def ev3_dc_stop_action(*args):
  return _ev3.ev3_dc_stop_action(*args)
ev3_dc_stop_action = _ev3.ev3_dc_stop_action

def set_dc_stop_action_inx(*args):
  return _ev3.set_dc_stop_action_inx(*args)
set_dc_stop_action_inx = _ev3.set_dc_stop_action_inx

def multi_set_dc_stop_action_inx(*args):
  return _ev3.multi_set_dc_stop_action_inx(*args)
multi_set_dc_stop_action_inx = _ev3.multi_set_dc_stop_action_inx

def get_dc_state_flags(*args):
  return _ev3.get_dc_state_flags(*args)
get_dc_state_flags = _ev3.get_dc_state_flags

def ev3_dc_init():
  return _ev3.ev3_dc_init()
ev3_dc_init = _ev3.ev3_dc_init
SERVO_DIR = _ev3.SERVO_DIR
class EV3_SERVO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EV3_SERVO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EV3_SERVO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_inx"] = _ev3.EV3_SERVO_type_inx_set
    __swig_getmethods__["type_inx"] = _ev3.EV3_SERVO_type_inx_get
    if _newclass:type_inx = _swig_property(_ev3.EV3_SERVO_type_inx_get, _ev3.EV3_SERVO_type_inx_set)
    __swig_setmethods__["port"] = _ev3.EV3_SERVO_port_set
    __swig_getmethods__["port"] = _ev3.EV3_SERVO_port_get
    if _newclass:port = _swig_property(_ev3.EV3_SERVO_port_get, _ev3.EV3_SERVO_port_set)
    __swig_setmethods__["extport"] = _ev3.EV3_SERVO_extport_set
    __swig_getmethods__["extport"] = _ev3.EV3_SERVO_extport_get
    if _newclass:extport = _swig_property(_ev3.EV3_SERVO_extport_get, _ev3.EV3_SERVO_extport_set)
    __swig_setmethods__["addr"] = _ev3.EV3_SERVO_addr_set
    __swig_getmethods__["addr"] = _ev3.EV3_SERVO_addr_get
    if _newclass:addr = _swig_property(_ev3.EV3_SERVO_addr_get, _ev3.EV3_SERVO_addr_set)
    def __init__(self): 
        this = _ev3.new_EV3_SERVO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ev3.delete_EV3_SERVO
    __del__ = lambda self : None;
EV3_SERVO_swigregister = _ev3.EV3_SERVO_swigregister
EV3_SERVO_swigregister(EV3_SERVO)

SERVO_DESC__LIMIT_ = _ev3.SERVO_DESC__LIMIT_
SERVO__NONE_ = _ev3.SERVO__NONE_
SERVO_TYPE__NONE_ = _ev3.SERVO_TYPE__NONE_
SERVO_MOTOR = _ev3.SERVO_MOTOR
SERVO_TYPE__COUNT_ = _ev3.SERVO_TYPE__COUNT_
SERVO_TYPE__UNKNOWN_ = _ev3.SERVO_TYPE__UNKNOWN_
SERVO_COMMAND__NONE_ = _ev3.SERVO_COMMAND__NONE_
SERVO_RUN = _ev3.SERVO_RUN
SERVO_FLOAT = _ev3.SERVO_FLOAT
SERVO_COMMAND__COUNT_ = _ev3.SERVO_COMMAND__COUNT_
SERVO_COMMAND__UNKNOWN_ = _ev3.SERVO_COMMAND__UNKNOWN_
SERVO_POLARITY__NONE_ = _ev3.SERVO_POLARITY__NONE_
SERVO_NORMAL = _ev3.SERVO_NORMAL
SERVO_INVERSED = _ev3.SERVO_INVERSED
SERVO_POLARITY__COUNT_ = _ev3.SERVO_POLARITY__COUNT_
SERVO_POLARITY__UNKNOWN_ = _ev3.SERVO_POLARITY__UNKNOWN_
SERVO_STATE__NONE_ = _ev3.SERVO_STATE__NONE_
SERVO_RUNNING = _ev3.SERVO_RUNNING

def get_servo_address(*args):
  return _ev3.get_servo_address(*args)
get_servo_address = _ev3.get_servo_address

def get_servo_command(*args):
  return _ev3.get_servo_command(*args)
get_servo_command = _ev3.get_servo_command

def set_servo_command(*args):
  return _ev3.set_servo_command(*args)
set_servo_command = _ev3.set_servo_command

def multi_set_servo_command(*args):
  return _ev3.multi_set_servo_command(*args)
multi_set_servo_command = _ev3.multi_set_servo_command

def get_servo_driver_name(*args):
  return _ev3.get_servo_driver_name(*args)
get_servo_driver_name = _ev3.get_servo_driver_name

def get_servo_max_pulse_sp(*args):
  return _ev3.get_servo_max_pulse_sp(*args)
get_servo_max_pulse_sp = _ev3.get_servo_max_pulse_sp

def set_servo_max_pulse_sp(*args):
  return _ev3.set_servo_max_pulse_sp(*args)
set_servo_max_pulse_sp = _ev3.set_servo_max_pulse_sp

def multi_set_servo_max_pulse_sp(*args):
  return _ev3.multi_set_servo_max_pulse_sp(*args)
multi_set_servo_max_pulse_sp = _ev3.multi_set_servo_max_pulse_sp

def get_servo_mid_pulse_sp(*args):
  return _ev3.get_servo_mid_pulse_sp(*args)
get_servo_mid_pulse_sp = _ev3.get_servo_mid_pulse_sp

def set_servo_mid_pulse_sp(*args):
  return _ev3.set_servo_mid_pulse_sp(*args)
set_servo_mid_pulse_sp = _ev3.set_servo_mid_pulse_sp

def multi_set_servo_mid_pulse_sp(*args):
  return _ev3.multi_set_servo_mid_pulse_sp(*args)
multi_set_servo_mid_pulse_sp = _ev3.multi_set_servo_mid_pulse_sp

def get_servo_min_pulse_sp(*args):
  return _ev3.get_servo_min_pulse_sp(*args)
get_servo_min_pulse_sp = _ev3.get_servo_min_pulse_sp

def set_servo_min_pulse_sp(*args):
  return _ev3.set_servo_min_pulse_sp(*args)
set_servo_min_pulse_sp = _ev3.set_servo_min_pulse_sp

def multi_set_servo_min_pulse_sp(*args):
  return _ev3.multi_set_servo_min_pulse_sp(*args)
multi_set_servo_min_pulse_sp = _ev3.multi_set_servo_min_pulse_sp

def get_servo_polarity(*args):
  return _ev3.get_servo_polarity(*args)
get_servo_polarity = _ev3.get_servo_polarity

def set_servo_polarity(*args):
  return _ev3.set_servo_polarity(*args)
set_servo_polarity = _ev3.set_servo_polarity

def multi_set_servo_polarity(*args):
  return _ev3.multi_set_servo_polarity(*args)
multi_set_servo_polarity = _ev3.multi_set_servo_polarity

def get_servo_position_sp(*args):
  return _ev3.get_servo_position_sp(*args)
get_servo_position_sp = _ev3.get_servo_position_sp

def set_servo_position_sp(*args):
  return _ev3.set_servo_position_sp(*args)
set_servo_position_sp = _ev3.set_servo_position_sp

def multi_set_servo_position_sp(*args):
  return _ev3.multi_set_servo_position_sp(*args)
multi_set_servo_position_sp = _ev3.multi_set_servo_position_sp

def get_servo_rate_sp(*args):
  return _ev3.get_servo_rate_sp(*args)
get_servo_rate_sp = _ev3.get_servo_rate_sp

def set_servo_rate_sp(*args):
  return _ev3.set_servo_rate_sp(*args)
set_servo_rate_sp = _ev3.set_servo_rate_sp

def multi_set_servo_rate_sp(*args):
  return _ev3.multi_set_servo_rate_sp(*args)
multi_set_servo_rate_sp = _ev3.multi_set_servo_rate_sp

def get_servo_state(*args):
  return _ev3.get_servo_state(*args)
get_servo_state = _ev3.get_servo_state

def ev3_servo_type(*args):
  return _ev3.ev3_servo_type(*args)
ev3_servo_type = _ev3.ev3_servo_type

def get_servo_type_inx(*args):
  return _ev3.get_servo_type_inx(*args)
get_servo_type_inx = _ev3.get_servo_type_inx

def get_servo_desc(*args):
  return _ev3.get_servo_desc(*args)
get_servo_desc = _ev3.get_servo_desc

def ev3_servo_desc(*args):
  return _ev3.ev3_servo_desc(*args)
ev3_servo_desc = _ev3.ev3_servo_desc

def ev3_servo_desc_type_inx(*args):
  return _ev3.ev3_servo_desc_type_inx(*args)
ev3_servo_desc_type_inx = _ev3.ev3_servo_desc_type_inx

def ev3_servo_desc_port(*args):
  return _ev3.ev3_servo_desc_port(*args)
ev3_servo_desc_port = _ev3.ev3_servo_desc_port

def ev3_servo_desc_extport(*args):
  return _ev3.ev3_servo_desc_extport(*args)
ev3_servo_desc_extport = _ev3.ev3_servo_desc_extport

def ev3_servo_desc_addr(*args):
  return _ev3.ev3_servo_desc_addr(*args)
ev3_servo_desc_addr = _ev3.ev3_servo_desc_addr

def ev3_servo_port_name(*args):
  return _ev3.ev3_servo_port_name(*args)
ev3_servo_port_name = _ev3.ev3_servo_port_name

def ev3_search_servo(*args):
  return _ev3.ev3_search_servo(*args)
ev3_search_servo = _ev3.ev3_search_servo

def ev3_search_servo_plugged_in(*args):
  return _ev3.ev3_search_servo_plugged_in(*args)
ev3_search_servo_plugged_in = _ev3.ev3_search_servo_plugged_in

def ev3_servo_command(*args):
  return _ev3.ev3_servo_command(*args)
ev3_servo_command = _ev3.ev3_servo_command

def get_servo_command_inx(*args):
  return _ev3.get_servo_command_inx(*args)
get_servo_command_inx = _ev3.get_servo_command_inx

def set_servo_command_inx(*args):
  return _ev3.set_servo_command_inx(*args)
set_servo_command_inx = _ev3.set_servo_command_inx

def multi_set_servo_command_inx(*args):
  return _ev3.multi_set_servo_command_inx(*args)
multi_set_servo_command_inx = _ev3.multi_set_servo_command_inx

def ev3_servo_polarity(*args):
  return _ev3.ev3_servo_polarity(*args)
ev3_servo_polarity = _ev3.ev3_servo_polarity

def get_servo_polarity_inx(*args):
  return _ev3.get_servo_polarity_inx(*args)
get_servo_polarity_inx = _ev3.get_servo_polarity_inx

def set_servo_polarity_inx(*args):
  return _ev3.set_servo_polarity_inx(*args)
set_servo_polarity_inx = _ev3.set_servo_polarity_inx

def multi_set_servo_polarity_inx(*args):
  return _ev3.multi_set_servo_polarity_inx(*args)
multi_set_servo_polarity_inx = _ev3.multi_set_servo_polarity_inx

def get_servo_state_flags(*args):
  return _ev3.get_servo_state_flags(*args)
get_servo_state_flags = _ev3.get_servo_state_flags

def ev3_servo_init():
  return _ev3.ev3_servo_init()
ev3_servo_init = _ev3.ev3_servo_init
SOCKET__NONE_ = _ev3.SOCKET__NONE_
IN1 = _ev3.IN1
IN2 = _ev3.IN2
IN3 = _ev3.IN3
IN4 = _ev3.IN4
OUTA = _ev3.OUTA
OUTB = _ev3.OUTB
OUTC = _ev3.OUTC
OUTD = _ev3.OUTD

def port_to_socket(*args):
  return _ev3.port_to_socket(*args)
port_to_socket = _ev3.port_to_socket

def socket_to_port(*args):
  return _ev3.socket_to_port(*args)
socket_to_port = _ev3.socket_to_port

def brick_init():
  return _ev3.brick_init()
brick_init = _ev3.brick_init

def brick_uninit():
  return _ev3.brick_uninit()
brick_uninit = _ev3.brick_uninit

def brick_keys():
  return _ev3.brick_keys()
brick_keys = _ev3.brick_keys

def sensor_get_address(*args):
  return _ev3.sensor_get_address(*args)
sensor_get_address = _ev3.sensor_get_address

def sensor_get_bin_data(*args):
  return _ev3.sensor_get_bin_data(*args)
sensor_get_bin_data = _ev3.sensor_get_bin_data

def sensor_set_bin_data(*args):
  return _ev3.sensor_set_bin_data(*args)
sensor_set_bin_data = _ev3.sensor_set_bin_data

def sensor_get_bin_data_format(*args):
  return _ev3.sensor_get_bin_data_format(*args)
sensor_get_bin_data_format = _ev3.sensor_get_bin_data_format

def sensor_set_command(*args):
  return _ev3.sensor_set_command(*args)
sensor_set_command = _ev3.sensor_set_command

def sensor_get_commands(*args):
  return _ev3.sensor_get_commands(*args)
sensor_get_commands = _ev3.sensor_get_commands

def sensor_get_direct(*args):
  return _ev3.sensor_get_direct(*args)
sensor_get_direct = _ev3.sensor_get_direct

def sensor_set_direct(*args):
  return _ev3.sensor_set_direct(*args)
sensor_set_direct = _ev3.sensor_set_direct

def sensor_get_decimals(*args):
  return _ev3.sensor_get_decimals(*args)
sensor_get_decimals = _ev3.sensor_get_decimals

def sensor_get_driver_name(*args):
  return _ev3.sensor_get_driver_name(*args)
sensor_get_driver_name = _ev3.sensor_get_driver_name

def sensor_get_fw_version(*args):
  return _ev3.sensor_get_fw_version(*args)
sensor_get_fw_version = _ev3.sensor_get_fw_version

def sensor_get_mode(*args):
  return _ev3.sensor_get_mode(*args)
sensor_get_mode = _ev3.sensor_get_mode

def sensor_set_mode(*args):
  return _ev3.sensor_set_mode(*args)
sensor_set_mode = _ev3.sensor_set_mode

def sensor_get_modes(*args):
  return _ev3.sensor_get_modes(*args)
sensor_get_modes = _ev3.sensor_get_modes

def sensor_get_num_values(*args):
  return _ev3.sensor_get_num_values(*args)
sensor_get_num_values = _ev3.sensor_get_num_values

def sensor_get_poll_ms(*args):
  return _ev3.sensor_get_poll_ms(*args)
sensor_get_poll_ms = _ev3.sensor_get_poll_ms

def sensor_set_poll_ms(*args):
  return _ev3.sensor_set_poll_ms(*args)
sensor_set_poll_ms = _ev3.sensor_set_poll_ms

def sensor_get_units(*args):
  return _ev3.sensor_get_units(*args)
sensor_get_units = _ev3.sensor_get_units

def sensor_get_value0(*args):
  return _ev3.sensor_get_value0(*args)
sensor_get_value0 = _ev3.sensor_get_value0

def sensor_get_value1(*args):
  return _ev3.sensor_get_value1(*args)
sensor_get_value1 = _ev3.sensor_get_value1

def sensor_get_value2(*args):
  return _ev3.sensor_get_value2(*args)
sensor_get_value2 = _ev3.sensor_get_value2

def sensor_get_value3(*args):
  return _ev3.sensor_get_value3(*args)
sensor_get_value3 = _ev3.sensor_get_value3

def sensor_get_value4(*args):
  return _ev3.sensor_get_value4(*args)
sensor_get_value4 = _ev3.sensor_get_value4

def sensor_get_value5(*args):
  return _ev3.sensor_get_value5(*args)
sensor_get_value5 = _ev3.sensor_get_value5

def sensor_get_value6(*args):
  return _ev3.sensor_get_value6(*args)
sensor_get_value6 = _ev3.sensor_get_value6

def sensor_get_value7(*args):
  return _ev3.sensor_get_value7(*args)
sensor_get_value7 = _ev3.sensor_get_value7

def sensor_get_text_value(*args):
  return _ev3.sensor_get_text_value(*args)
sensor_get_text_value = _ev3.sensor_get_text_value

def sensor_get_value(*args):
  return _ev3.sensor_get_value(*args)
sensor_get_value = _ev3.sensor_get_value

def us_set_mode_us_dist_cm(*args):
  return _ev3.us_set_mode_us_dist_cm(*args)
us_set_mode_us_dist_cm = _ev3.us_set_mode_us_dist_cm

def us_set_mode_us_dist_in(*args):
  return _ev3.us_set_mode_us_dist_in(*args)
us_set_mode_us_dist_in = _ev3.us_set_mode_us_dist_in

def us_set_mode_us_listen(*args):
  return _ev3.us_set_mode_us_listen(*args)
us_set_mode_us_listen = _ev3.us_set_mode_us_listen

def us_set_mode_us_si_cm(*args):
  return _ev3.us_set_mode_us_si_cm(*args)
us_set_mode_us_si_cm = _ev3.us_set_mode_us_si_cm

def us_set_mode_us_si_in(*args):
  return _ev3.us_set_mode_us_si_in(*args)
us_set_mode_us_si_in = _ev3.us_set_mode_us_si_in

def us_set_mode_us_dc_cm(*args):
  return _ev3.us_set_mode_us_dc_cm(*args)
us_set_mode_us_dc_cm = _ev3.us_set_mode_us_dc_cm

def us_set_mode_us_dc_in(*args):
  return _ev3.us_set_mode_us_dc_in(*args)
us_set_mode_us_dc_in = _ev3.us_set_mode_us_dc_in

def gyro_set_mode_gyro_ang(*args):
  return _ev3.gyro_set_mode_gyro_ang(*args)
gyro_set_mode_gyro_ang = _ev3.gyro_set_mode_gyro_ang

def gyro_set_mode_gyro_rate(*args):
  return _ev3.gyro_set_mode_gyro_rate(*args)
gyro_set_mode_gyro_rate = _ev3.gyro_set_mode_gyro_rate

def gyro_set_mode_gyro_fas(*args):
  return _ev3.gyro_set_mode_gyro_fas(*args)
gyro_set_mode_gyro_fas = _ev3.gyro_set_mode_gyro_fas

def gyro_set_mode_gyro_g_and_a(*args):
  return _ev3.gyro_set_mode_gyro_g_and_a(*args)
gyro_set_mode_gyro_g_and_a = _ev3.gyro_set_mode_gyro_g_and_a

def gyro_set_mode_gyro_cal(*args):
  return _ev3.gyro_set_mode_gyro_cal(*args)
gyro_set_mode_gyro_cal = _ev3.gyro_set_mode_gyro_cal

def color_set_mode_col_reflect(*args):
  return _ev3.color_set_mode_col_reflect(*args)
color_set_mode_col_reflect = _ev3.color_set_mode_col_reflect

def color_set_mode_col_ambient(*args):
  return _ev3.color_set_mode_col_ambient(*args)
color_set_mode_col_ambient = _ev3.color_set_mode_col_ambient

def color_set_mode_col_color(*args):
  return _ev3.color_set_mode_col_color(*args)
color_set_mode_col_color = _ev3.color_set_mode_col_color

def color_set_mode_ref_raw(*args):
  return _ev3.color_set_mode_ref_raw(*args)
color_set_mode_ref_raw = _ev3.color_set_mode_ref_raw

def color_set_mode_rgb_raw(*args):
  return _ev3.color_set_mode_rgb_raw(*args)
color_set_mode_rgb_raw = _ev3.color_set_mode_rgb_raw

def color_set_mode_col_cal(*args):
  return _ev3.color_set_mode_col_cal(*args)
color_set_mode_col_cal = _ev3.color_set_mode_col_cal

def touch_set_mode_touch(*args):
  return _ev3.touch_set_mode_touch(*args)
touch_set_mode_touch = _ev3.touch_set_mode_touch

def ir_set_mode_ir_prox(*args):
  return _ev3.ir_set_mode_ir_prox(*args)
ir_set_mode_ir_prox = _ev3.ir_set_mode_ir_prox

def ir_set_mode_ir_seek(*args):
  return _ev3.ir_set_mode_ir_seek(*args)
ir_set_mode_ir_seek = _ev3.ir_set_mode_ir_seek

def ir_set_mode_ir_remote(*args):
  return _ev3.ir_set_mode_ir_remote(*args)
ir_set_mode_ir_remote = _ev3.ir_set_mode_ir_remote

def ir_set_mode_ir_rem_a(*args):
  return _ev3.ir_set_mode_ir_rem_a(*args)
ir_set_mode_ir_rem_a = _ev3.ir_set_mode_ir_rem_a

def ir_set_mode_ir_s_alt(*args):
  return _ev3.ir_set_mode_ir_s_alt(*args)
ir_set_mode_ir_s_alt = _ev3.ir_set_mode_ir_s_alt

def ir_set_mode_ir_cal(*args):
  return _ev3.ir_set_mode_ir_cal(*args)
ir_set_mode_ir_cal = _ev3.ir_set_mode_ir_cal

def sensor_search(*args):
  return _ev3.sensor_search(*args)
sensor_search = _ev3.sensor_search

def sensor_is_plugged(*args):
  return _ev3.sensor_is_plugged(*args)
sensor_is_plugged = _ev3.sensor_is_plugged

def tacho_get_address(*args):
  return _ev3.tacho_get_address(*args)
tacho_get_address = _ev3.tacho_get_address

def tacho_set_command(*args):
  return _ev3.tacho_set_command(*args)
tacho_set_command = _ev3.tacho_set_command

def tacho_get_commands(*args):
  return _ev3.tacho_get_commands(*args)
tacho_get_commands = _ev3.tacho_get_commands

def tacho_get_count_per_rot(*args):
  return _ev3.tacho_get_count_per_rot(*args)
tacho_get_count_per_rot = _ev3.tacho_get_count_per_rot

def tacho_get_count_per_m(*args):
  return _ev3.tacho_get_count_per_m(*args)
tacho_get_count_per_m = _ev3.tacho_get_count_per_m

def tacho_get_full_travel_count(*args):
  return _ev3.tacho_get_full_travel_count(*args)
tacho_get_full_travel_count = _ev3.tacho_get_full_travel_count

def tacho_get_driver_name(*args):
  return _ev3.tacho_get_driver_name(*args)
tacho_get_driver_name = _ev3.tacho_get_driver_name

def tacho_get_duty_cycle(*args):
  return _ev3.tacho_get_duty_cycle(*args)
tacho_get_duty_cycle = _ev3.tacho_get_duty_cycle

def tacho_get_duty_cycle_sp(*args):
  return _ev3.tacho_get_duty_cycle_sp(*args)
tacho_get_duty_cycle_sp = _ev3.tacho_get_duty_cycle_sp

def tacho_set_duty_cycle_sp(*args):
  return _ev3.tacho_set_duty_cycle_sp(*args)
tacho_set_duty_cycle_sp = _ev3.tacho_set_duty_cycle_sp

def tacho_get_hold_pid_Kd(*args):
  return _ev3.tacho_get_hold_pid_Kd(*args)
tacho_get_hold_pid_Kd = _ev3.tacho_get_hold_pid_Kd

def tacho_set_hold_pid_Kd(*args):
  return _ev3.tacho_set_hold_pid_Kd(*args)
tacho_set_hold_pid_Kd = _ev3.tacho_set_hold_pid_Kd

def tacho_get_hold_pid_Ki(*args):
  return _ev3.tacho_get_hold_pid_Ki(*args)
tacho_get_hold_pid_Ki = _ev3.tacho_get_hold_pid_Ki

def tacho_set_hold_pid_Ki(*args):
  return _ev3.tacho_set_hold_pid_Ki(*args)
tacho_set_hold_pid_Ki = _ev3.tacho_set_hold_pid_Ki

def tacho_get_hold_pid_Kp(*args):
  return _ev3.tacho_get_hold_pid_Kp(*args)
tacho_get_hold_pid_Kp = _ev3.tacho_get_hold_pid_Kp

def tacho_set_hold_pid_Kp(*args):
  return _ev3.tacho_set_hold_pid_Kp(*args)
tacho_set_hold_pid_Kp = _ev3.tacho_set_hold_pid_Kp

def tacho_get_max_speed(*args):
  return _ev3.tacho_get_max_speed(*args)
tacho_get_max_speed = _ev3.tacho_get_max_speed

def tacho_get_polarity(*args):
  return _ev3.tacho_get_polarity(*args)
tacho_get_polarity = _ev3.tacho_get_polarity

def tacho_set_polarity(*args):
  return _ev3.tacho_set_polarity(*args)
tacho_set_polarity = _ev3.tacho_set_polarity

def tacho_get_position(*args):
  return _ev3.tacho_get_position(*args)
tacho_get_position = _ev3.tacho_get_position

def tacho_set_position(*args):
  return _ev3.tacho_set_position(*args)
tacho_set_position = _ev3.tacho_set_position

def tacho_get_position_sp(*args):
  return _ev3.tacho_get_position_sp(*args)
tacho_get_position_sp = _ev3.tacho_get_position_sp

def tacho_set_position_sp(*args):
  return _ev3.tacho_set_position_sp(*args)
tacho_set_position_sp = _ev3.tacho_set_position_sp

def tacho_get_ramp_down_sp(*args):
  return _ev3.tacho_get_ramp_down_sp(*args)
tacho_get_ramp_down_sp = _ev3.tacho_get_ramp_down_sp

def tacho_set_ramp_down_sp(*args):
  return _ev3.tacho_set_ramp_down_sp(*args)
tacho_set_ramp_down_sp = _ev3.tacho_set_ramp_down_sp

def tacho_get_ramp_up_sp(*args):
  return _ev3.tacho_get_ramp_up_sp(*args)
tacho_get_ramp_up_sp = _ev3.tacho_get_ramp_up_sp

def tacho_set_ramp_up_sp(*args):
  return _ev3.tacho_set_ramp_up_sp(*args)
tacho_set_ramp_up_sp = _ev3.tacho_set_ramp_up_sp

def tacho_get_speed(*args):
  return _ev3.tacho_get_speed(*args)
tacho_get_speed = _ev3.tacho_get_speed

def tacho_get_speed_pid_Kd(*args):
  return _ev3.tacho_get_speed_pid_Kd(*args)
tacho_get_speed_pid_Kd = _ev3.tacho_get_speed_pid_Kd

def tacho_set_speed_pid_Kd(*args):
  return _ev3.tacho_set_speed_pid_Kd(*args)
tacho_set_speed_pid_Kd = _ev3.tacho_set_speed_pid_Kd

def tacho_get_speed_pid_Ki(*args):
  return _ev3.tacho_get_speed_pid_Ki(*args)
tacho_get_speed_pid_Ki = _ev3.tacho_get_speed_pid_Ki

def tacho_set_speed_pid_Ki(*args):
  return _ev3.tacho_set_speed_pid_Ki(*args)
tacho_set_speed_pid_Ki = _ev3.tacho_set_speed_pid_Ki

def tacho_get_speed_pid_Kp(*args):
  return _ev3.tacho_get_speed_pid_Kp(*args)
tacho_get_speed_pid_Kp = _ev3.tacho_get_speed_pid_Kp

def tacho_set_speed_pid_Kp(*args):
  return _ev3.tacho_set_speed_pid_Kp(*args)
tacho_set_speed_pid_Kp = _ev3.tacho_set_speed_pid_Kp

def tacho_get_speed_sp(*args):
  return _ev3.tacho_get_speed_sp(*args)
tacho_get_speed_sp = _ev3.tacho_get_speed_sp

def tacho_set_speed_sp(*args):
  return _ev3.tacho_set_speed_sp(*args)
tacho_set_speed_sp = _ev3.tacho_set_speed_sp

def tacho_get_state(*args):
  return _ev3.tacho_get_state(*args)
tacho_get_state = _ev3.tacho_get_state

def tacho_get_stop_action(*args):
  return _ev3.tacho_get_stop_action(*args)
tacho_get_stop_action = _ev3.tacho_get_stop_action

def tacho_set_stop_action(*args):
  return _ev3.tacho_set_stop_action(*args)
tacho_set_stop_action = _ev3.tacho_set_stop_action

def tacho_get_stop_actions(*args):
  return _ev3.tacho_get_stop_actions(*args)
tacho_get_stop_actions = _ev3.tacho_get_stop_actions

def tacho_get_time_sp(*args):
  return _ev3.tacho_get_time_sp(*args)
tacho_get_time_sp = _ev3.tacho_get_time_sp

def tacho_set_time_sp(*args):
  return _ev3.tacho_set_time_sp(*args)
tacho_set_time_sp = _ev3.tacho_set_time_sp

def tacho_run_forever(*args):
  return _ev3.tacho_run_forever(*args)
tacho_run_forever = _ev3.tacho_run_forever

def tacho_run_to_abs_pos(*args):
  return _ev3.tacho_run_to_abs_pos(*args)
tacho_run_to_abs_pos = _ev3.tacho_run_to_abs_pos

def tacho_run_to_rel_pos(*args):
  return _ev3.tacho_run_to_rel_pos(*args)
tacho_run_to_rel_pos = _ev3.tacho_run_to_rel_pos

def tacho_run_timed(*args):
  return _ev3.tacho_run_timed(*args)
tacho_run_timed = _ev3.tacho_run_timed

def tacho_run_direct(*args):
  return _ev3.tacho_run_direct(*args)
tacho_run_direct = _ev3.tacho_run_direct

def tacho_stop(*args):
  return _ev3.tacho_stop(*args)
tacho_stop = _ev3.tacho_stop

def tacho_reset(*args):
  return _ev3.tacho_reset(*args)
tacho_reset = _ev3.tacho_reset

def tacho_set_polarity_normal(*args):
  return _ev3.tacho_set_polarity_normal(*args)
tacho_set_polarity_normal = _ev3.tacho_set_polarity_normal

def tacho_set_polarity_inversed(*args):
  return _ev3.tacho_set_polarity_inversed(*args)
tacho_set_polarity_inversed = _ev3.tacho_set_polarity_inversed

def tacho_set_stop_action_coast(*args):
  return _ev3.tacho_set_stop_action_coast(*args)
tacho_set_stop_action_coast = _ev3.tacho_set_stop_action_coast

def tacho_set_stop_action_brake(*args):
  return _ev3.tacho_set_stop_action_brake(*args)
tacho_set_stop_action_brake = _ev3.tacho_set_stop_action_brake

def tacho_set_stop_action_hold(*args):
  return _ev3.tacho_set_stop_action_hold(*args)
tacho_set_stop_action_hold = _ev3.tacho_set_stop_action_hold

def tacho_search(*args):
  return _ev3.tacho_search(*args)
tacho_search = _ev3.tacho_search

def tacho_is_plugged(*args):
  return _ev3.tacho_is_plugged(*args)
tacho_is_plugged = _ev3.tacho_is_plugged

def tacho_is_running(*args):
  return _ev3.tacho_is_running(*args)
tacho_is_running = _ev3.tacho_is_running

def dc_get_address(*args):
  return _ev3.dc_get_address(*args)
dc_get_address = _ev3.dc_get_address

def dc_set_command(*args):
  return _ev3.dc_set_command(*args)
dc_set_command = _ev3.dc_set_command

def dc_get_commands(*args):
  return _ev3.dc_get_commands(*args)
dc_get_commands = _ev3.dc_get_commands

def dc_get_driver_name(*args):
  return _ev3.dc_get_driver_name(*args)
dc_get_driver_name = _ev3.dc_get_driver_name

def dc_get_duty_cycle(*args):
  return _ev3.dc_get_duty_cycle(*args)
dc_get_duty_cycle = _ev3.dc_get_duty_cycle

def dc_get_duty_cycle_sp(*args):
  return _ev3.dc_get_duty_cycle_sp(*args)
dc_get_duty_cycle_sp = _ev3.dc_get_duty_cycle_sp

def dc_set_duty_cycle_sp(*args):
  return _ev3.dc_set_duty_cycle_sp(*args)
dc_set_duty_cycle_sp = _ev3.dc_set_duty_cycle_sp

def dc_get_polarity(*args):
  return _ev3.dc_get_polarity(*args)
dc_get_polarity = _ev3.dc_get_polarity

def dc_set_polarity(*args):
  return _ev3.dc_set_polarity(*args)
dc_set_polarity = _ev3.dc_set_polarity

def dc_get_state(*args):
  return _ev3.dc_get_state(*args)
dc_get_state = _ev3.dc_get_state

def dc_set_stop_action(*args):
  return _ev3.dc_set_stop_action(*args)
dc_set_stop_action = _ev3.dc_set_stop_action

def dc_get_stop_actions(*args):
  return _ev3.dc_get_stop_actions(*args)
dc_get_stop_actions = _ev3.dc_get_stop_actions

def dc_get_ramp_down_sp(*args):
  return _ev3.dc_get_ramp_down_sp(*args)
dc_get_ramp_down_sp = _ev3.dc_get_ramp_down_sp

def dc_set_ramp_down_sp(*args):
  return _ev3.dc_set_ramp_down_sp(*args)
dc_set_ramp_down_sp = _ev3.dc_set_ramp_down_sp

def dc_get_ramp_up_sp(*args):
  return _ev3.dc_get_ramp_up_sp(*args)
dc_get_ramp_up_sp = _ev3.dc_get_ramp_up_sp

def dc_set_ramp_up_sp(*args):
  return _ev3.dc_set_ramp_up_sp(*args)
dc_set_ramp_up_sp = _ev3.dc_set_ramp_up_sp

def dc_get_time_sp(*args):
  return _ev3.dc_get_time_sp(*args)
dc_get_time_sp = _ev3.dc_get_time_sp

def dc_set_time_sp(*args):
  return _ev3.dc_set_time_sp(*args)
dc_set_time_sp = _ev3.dc_set_time_sp

def dc_run_forever(*args):
  return _ev3.dc_run_forever(*args)
dc_run_forever = _ev3.dc_run_forever

def dc_run_timed(*args):
  return _ev3.dc_run_timed(*args)
dc_run_timed = _ev3.dc_run_timed

def dc_run_direct(*args):
  return _ev3.dc_run_direct(*args)
dc_run_direct = _ev3.dc_run_direct

def dc_stop(*args):
  return _ev3.dc_stop(*args)
dc_stop = _ev3.dc_stop

def dc_set_polarity_normal(*args):
  return _ev3.dc_set_polarity_normal(*args)
dc_set_polarity_normal = _ev3.dc_set_polarity_normal

def dc_set_polarity_inversed(*args):
  return _ev3.dc_set_polarity_inversed(*args)
dc_set_polarity_inversed = _ev3.dc_set_polarity_inversed

def dc_set_stop_action_coast(*args):
  return _ev3.dc_set_stop_action_coast(*args)
dc_set_stop_action_coast = _ev3.dc_set_stop_action_coast

def dc_set_stop_action_brake(*args):
  return _ev3.dc_set_stop_action_brake(*args)
dc_set_stop_action_brake = _ev3.dc_set_stop_action_brake

def dc_search(*args):
  return _ev3.dc_search(*args)
dc_search = _ev3.dc_search

def dc_is_plugged(*args):
  return _ev3.dc_is_plugged(*args)
dc_is_plugged = _ev3.dc_is_plugged

def dc_is_running(*args):
  return _ev3.dc_is_running(*args)
dc_is_running = _ev3.dc_is_running

def sleep_ms(*args):
  return _ev3.sleep_ms(*args)
sleep_ms = _ev3.sleep_ms
# This file is compatible with both classic and new-style classes.


