($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($set PATH_PREF,,($unq CLASS_PATH)/($unq CLASS_FOLDER_PREF))
#define PATH_PREF_LEN  ($len PATH_PREF)
#define DESC_SPOT  "///"

($each-CLASS_ATTR \i.]
#define PATH_($upper ($i CLASS_ATTR_ID))  ($q PATH_PREF) DESC_SPOT ($i CLASS_ATTR_NAME)

[ )

($each-CLASS_AVEC \i.]
#define PATH_($upper ($i CLASS_AVEC_ID))  ($q PATH_PREF) DESC_SPOT ($i CLASS_AVEC_NAME)

[ )

($each-CLASS_ATTR \i.]

	($if ($le ($i CLASS_ATTR_WRITE) RW) ]
		size_t get_($CLASS_ID)_($i CLASS_ATTR_ID)( uint8_t sn, ($i CLASS_ATTR_TYPE) *buf($[, size_t sz] ? ($i CLASS_ATTR_ARRAY)) )
		{
			char s[] = PATH_($upper ($i CLASS_ATTR_ID));
			*modp_uitoa10( sn, s + PATH_PREF_LEN ) = '/';

			return ev3_read_($i CLASS_ATTR_TYPE)($[_array] ? ($i CLASS_ATTR_ARRAY))( s, buf($[, sz] ? ($i CLASS_ATTR_ARRAY)) );
		}
	[ )

	($if ($ge ($i CLASS_ATTR_WRITE) RW) ]
		size_t set_($CLASS_ID)_($i CLASS_ATTR_ID)( uint8_t sn, ($i CLASS_ATTR_TYPE) ($[*] ? ($i CLASS_ATTR_ARRAY))value($[, size_t sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) )
		{
			char s[] = PATH_($upper ($i CLASS_ATTR_ID));
			*modp_uitoa10( sn, s + PATH_PREF_LEN ) = '/';

			return ev3_write_($i CLASS_ATTR_TYPE)($[_array] ? ($i CLASS_ATTR_ARRAY))( s, value($[, sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) );
		}

		size_t multi_set_($CLASS_ID)_($i CLASS_ATTR_ID)( uint8_t *sn, ($i CLASS_ATTR_TYPE) ($[*] ? ($i CLASS_ATTR_ARRAY))value($[, size_t sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) )
		{
			char s[] = PATH_($upper ($i CLASS_ATTR_ID));

			return ev3_multi_write_($i CLASS_ATTR_TYPE)($[_array] ? ($i CLASS_ATTR_ARRAY))( sn, PATH_PREF_LEN, s, value($[, sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) );
		}
	[ )

[ )

($each-CLASS_AVEC \i.]

	size_t get_($CLASS_ID)_($i CLASS_AVEC_ID)( uint8_t inx, uint8_t sn, ($i CLASS_AVEC_TYPE) *buf($[, size_t sz] ? ($i CLASS_AVEC_ARRAY)) )
	{
		char s[] = PATH_($upper ($i CLASS_AVEC_ID)) "    ";

		if ( inx > ($i CLASS_AVEC_SIZE) ) return ( 0 );

		*modp_uitoa10( sn, s + PATH_PREF_LEN ) = '/';
		modp_uitoa10( inx, s + PATH_PREF_LEN + 3 + ($len ($i CLASS_AVEC_ID)) );

		return ev3_read_($i CLASS_AVEC_TYPE)($[_array] ? ($i CLASS_AVEC_ARRAY))( s, buf($[, sz] ? ($i CLASS_AVEC_ARRAY)) );
	}

[ )

const char *ev3_($CLASS_ID)_type( INX_T type_inx )
{
	switch ( type_inx ) {
	($each-CLASS_TYPE \i.]
	case ($upper ($i CLASS_TYPE_ID)):
		return ($i CLASS_TYPE_NAME);

	[ )
	}
	return ( STR_unknown_ );
}

INX_T get_($CLASS_ID)_type_inx( uint8_t sn )
{
	char buf[ 64 ];

	if ( !get_($CLASS_ID)_($unq CLASS_TYPE_ATTR_NAME)( sn, buf, sizeof( buf ))) return ( ($upper CLASS_ID)_TYPE__NONE_ );

	($if ($ge ($len CLASS_TYPE_NAME) _USE_CRC32_FROM) ]
		switch ( crc32( 0, buf, strlen( buf ))) {
		($each-CLASS_TYPE \i.]
		case ($hex ($crc32 ($unq ($i CLASS_TYPE_NAME)))):  /* ($i CLASS_TYPE_NAME) */
			return ($upper ($i CLASS_TYPE_ID));

		[ )
		}
	[ \else ]
		($each-CLASS_TYPE \i.]
			if ( strcmp( buf, ($i CLASS_TYPE_NAME) ) == 0 ) return ($upper ($i CLASS_TYPE_ID));

		[ )
	[ )

	return ( ($upper CLASS_ID)_TYPE__UNKNOWN_ );
}

size_t get_($CLASS_ID)_desc( uint8_t sn, EV3_($upper CLASS_ID) *desc )
{
	uint8_t addr;
	char buf[ 32 ];

	desc->type_inx = get_($CLASS_ID)_type_inx( sn );
	if ( desc->type_inx == ($upper CLASS_ID)_TYPE__NONE_ ) return ( 0 );

	if ( !get_($CLASS_ID)_address( sn, buf, sizeof( buf ))) return ( 0 );

	ev3_parse_port_name( buf, &desc->port, &desc->extport, &addr );
	($if CLASS_DESC_ADDR ]
		desc->addr = addr;

	[ )
	return ( sizeof( EV3_($upper CLASS_ID) ));
}

EV3_($upper CLASS_ID) *ev3_($CLASS_ID)_desc( uint8_t sn )
{
	if ( sn >= ($upper CLASS_ID)_DESC__LIMIT_) sn = ($upper CLASS_ID)_DESC__LIMIT_ - 1;
	return ( ev3_($CLASS_ID) + sn );
}

($each-CLASS_DESC \i.]

	($i CLASS_DESC_TYPE) ev3_($CLASS_ID)_desc_($i CLASS_DESC_ID)( uint8_t sn )
	{
		return ( ev3_($CLASS_ID)_desc( sn )->($i CLASS_DESC_ID) );
	}

[ )

char *ev3_($CLASS_ID)_port_name( uint8_t sn, char *buf )
{
	return ( ev3_port_name( ev3_($CLASS_ID)_desc( sn )->port, ev3_($CLASS_ID)_desc( sn )->extport, ($if CLASS_DESC_ADDR,,ev3_($CLASS_ID)_desc( sn )->addr,,0), buf ));
}

bool ev3_search_($CLASS_ID)($[_type] ? ($eq CLASS_ID [port]))( INX_T type_inx, uint8_t *sn, uint8_t from )
{
	uint8_t _sn = from;

	while ( _sn < ($upper CLASS_ID)_DESC__LIMIT_) {
		if ( ev3_($CLASS_ID)[ _sn ].type_inx == type_inx ) {
			*sn = _sn;
			return ( true );
		}
		++_sn;
	}
	*sn = ($upper CLASS_ID)__NONE_;
	return ( false );
}

bool ev3_search_($CLASS_ID)_plugged_in( uint8_t port, uint8_t extport, uint8_t *sn, uint8_t from )
{
	uint8_t _sn = from;

	while ( _sn < ($upper CLASS_ID)_DESC__LIMIT_) {
		if ( ev3_($CLASS_ID)[ _sn ].port == port ) {
			if ( extport ) {
				if ( ev3_($CLASS_ID)[ _sn ].extport == extport ) {
					*sn = _sn;
					return ( true );
				}
			} else {
				*sn = _sn;
				return ( true );
			}
		}
		++_sn;
	}
	*sn = ($upper CLASS_ID)__NONE_;
	return ( false );
}

($CLASS_TYPE_ATTR_ID_INDEX \attr.]

	const char *ev3_($CLASS_ID)_($attr)( INX_T ($attr)_inx )
	{
		switch ( ($attr)_inx ) {
		($each-CLASS_TYPE \i.]
			($($i ($$'CLASS_TYPE_($0)S' ($upper attr))) \ii.]
				case ($upper ($i CLASS_TYPE_ID))_($upper ($_VALUE_TO_ID ii)):
					return ($ii);

			[ )

		[ )
		}
		return ( STR_unknown_ );
	}

	($if ($le ($($index CLASS_ATTR_NAME ($q attr)) CLASS_ATTR_WRITE) RW) ]
		INX_T get_($CLASS_ID)_($attr)_inx_of_type( uint8_t sn, INX_T type_inx )
		{
			char buf[ 64 ];

			if ( !get_($CLASS_ID)_($attr)( sn, buf, sizeof( buf ))) return ( ($upper CLASS_ID)_($upper attr)__NONE_ );

			switch ( type_inx ) {
			($each-CLASS_TYPE \i.]

				case ($upper ($i CLASS_TYPE_ID)):
					($($i ($$'CLASS_TYPE_($0)S' ($upper attr))) \ii.]
						if ( strcmp( buf, ($ii) ) == 0 ) return ($upper ($i CLASS_TYPE_ID))_($upper ($_VALUE_TO_ID ii));

					[ )
					break;

			[ )
			}
			return ( ($upper CLASS_ID)_($upper attr)__UNKNOWN_ );
		}

		INX_T get_($CLASS_ID)_($attr)_inx( uint8_t sn )
		{
			return get_($CLASS_ID)_($attr)_inx_of_type( sn, ev3_($CLASS_ID)_desc( sn )->type_inx );
		}

	[ )
	size_t set_($CLASS_ID)_($attr)_inx( uint8_t sn, INX_T ($attr)_inx )
	{
		return set_($CLASS_ID)_($attr)( sn, ( char *) ev3_($CLASS_ID)_($attr)( ($attr)_inx ));
	}

	size_t multi_set_($CLASS_ID)_($attr)_inx( uint8_t *sn, INX_T ($attr)_inx )
	{
		return multi_set_($CLASS_ID)_($attr)( sn, ( char *) ev3_($CLASS_ID)_($attr)( ($attr)_inx ));
	}

[ )

($CLASS_ATTR_ID_INDEX \attr.]

	const char *ev3_($CLASS_ID)_($attr)( INX_T ($attr)_inx )
	{
		switch ( ($attr)_inx ) {
		($($$'CLASS_($0)S' ($upper attr)) \i.]
			case ($upper CLASS_ID)_($upper ($_VALUE_TO_ID i)):
				return ($i);

			[ )
		}
		return ( STR_unknown_ );
	}

	($if ($le ($($index CLASS_ATTR_NAME ($q attr)) CLASS_ATTR_WRITE) RW) ]
		INX_T get_($CLASS_ID)_($attr)_inx( uint8_t sn )
		{
			char buf[ 64 ];

			if ( !get_($CLASS_ID)_($attr)( sn, buf, sizeof( buf ))) return ( ($upper CLASS_ID)_($upper attr)__NONE_ );

			($($$'CLASS_($0)S' ($upper attr)) \i.]
				if ( strcmp( buf, ($i) ) == 0 ) return ($upper CLASS_ID)_($upper ($_VALUE_TO_ID i));

			[ )
			return ( ($upper CLASS_ID)_($upper attr)__UNKNOWN_ );
		}

	[ )
	size_t set_($CLASS_ID)_($attr)_inx( uint8_t sn, INX_T ($attr)_inx )
	{
		return set_($CLASS_ID)_($attr)( sn, ( char *) ev3_($CLASS_ID)_($attr)( ($attr)_inx ));
	}

	size_t multi_set_($CLASS_ID)_($attr)_inx( uint8_t *sn, INX_T ($attr)_inx )
	{
		return multi_set_($CLASS_ID)_($attr)( sn, ( char *) ev3_($CLASS_ID)_($attr)( ($attr)_inx ));
	}

[ )

($CLASS_ATTR_ID_FLAGS \attr.]

	size_t get_($CLASS_ID)_($attr)_flags( uint8_t sn, FLAGS_T *flags )
	{
		char buf[ 64 ];
		size_t result;

		result = get_($CLASS_ID)_($attr)( sn, buf, sizeof( buf ));
		if ( result == 0 ) return ( 0 );

		*flags = ($upper CLASS_ID)_($upper attr)__NONE_;
		if ( result == 1 ) return ( 1 );

		($($$'CLASS_($0)S' ($upper attr)) \i.]
			if ( strstr( buf, ($i) )) *flags |= ($upper CLASS_ID)_($upper ($_VALUE_TO_ID ($i)));

		[ )
		return ( result );
	}

[ )

int ev3_($CLASS_ID)_init( void )
{
	char list[ 256 ];
	char *p;
	uint32_t sn;
	int cnt = 0;

	memset( ev3_($CLASS_ID), 0, sizeof( ev3_($CLASS_ID) ));

	if ( !ev3_listdir( ($CLASS_PATH), list, sizeof( list ))) return ( -1 );

	p = strtok( list, " " );
	while ( p ) {
		if (( ev3_string_suffix( ($CLASS_FOLDER_PREF), &p, &sn ) == 1 ) && ( sn < ($upper CLASS_ID)_DESC__LIMIT_)) {
			get_($CLASS_ID)_desc( sn, ev3_($CLASS_ID) + sn );
			++cnt;
		}
		p = strtok( NULL, " " );
	}
	return ( cnt );
}
