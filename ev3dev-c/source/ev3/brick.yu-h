($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($import "app.yu")
($TITLE,,Simplified interface of "ev3dev-c" library.)

($import stdlib)
($import hlib)

($h-begin-named)

#include <stdint.h>
#include <stdbool.h>
#include "ev3.h"
#include "ev3_port.h"
#include "ev3_sensor.h"
#include "ev3_tacho.h"
#include "ev3_dc.h"

/**
 *  \defgroup brick "brick" library
 *  \brief Simplified interface of "ev3dev-c" library.
 *
 *  "brick" library allows simultaneous setting of identical attributes of multiple
 *  devices using a ports mask, e.g. `tacho_run_forever(OUTA | OUTB)`,
 *  but extended ports are not supported.
 *  \{
 */

($extern-c-begin)

($import "brick_socket-dict.yu")

/**
 *  \brief Type of a pool of input or output sockets.
 */
typedef uint8_t POOL_T;

/**
 *  \brief Identifiers of sockets.
 */
enum {
	SOCKET__NONE_ = 0,

	($each-SOCKET \i.]
		($upper ($i SOCKET_ID)) = ($hex ($lshift 1 i)),

	[ )
};

/**
 *  \brief Get socket of the EV3 port.
 *  \param port EV3 port.
 *  \return Socket.
 */
extern POOL_T port_to_socket( uint8_t port );

/**
 *  \brief Get EV3 port of the socket.
 *  \param sock Socket.
 *  \return EV3 port.
 */
extern uint8_t socket_to_port( POOL_T sock );

/**
 *  \brief Initialize the EV3 brick.
 *  \return false - the brick is NOT found or an error has occurred;
 *  true - the brick is OK.
 */
extern bool brick_init( void );

/**
 *  \brief Uninitialize the EV3 brick.
 */
extern void brick_uninit( void );

/**
 *  \brief Read state of the EV3 brick's keys.
 *  \return State.
 */
extern uint8_t brick_keys( void );

($import "ev3_sensor-dict.yu")
($import "ev3_class_decl.yu")
($import "brick-h.yu")

($import "ev3_tacho-dict.yu")
($import "ev3_class_decl.yu")
($import "brick-h.yu")

($import "ev3_dc-dict.yu")
($import "ev3_class_decl.yu")
($import "brick-h.yu")

/**
 *  \brief Delay in milliseconds.
 *  \param ms Value.
 */
extern void sleep_ms( uint32_t ms );

($extern-c-end)

/** \} */

($h-end)
