($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

($import "app.yu")
($TITLE,,Simplified interface of "ev3dev-c" library.)

($import stdlib)
($import hlib)

($implement-named)

#include <string.h>
#include "brick.h"

/**
 *  \addtogroup brick
 *  \{
 */

// WIN32 /////////////////////////////////////////
#ifdef __WIN32__

#include <windows.h>

// UNIX //////////////////////////////////////////
#else

#include <unistd.h>
#define Sleep( ms ) usleep(( ms ) * 1000 )

//////////////////////////////////////////////////
#endif

($import "brick_socket-dict.yu")

POOL_T port_to_socket( uint8_t port )
{
	switch ( port ) {
	($each-SOCKET \i.]
		case ($i SOCKET_PORT):
			return ($i SOCKET_ID);

	[ )
	}
	return ( 0 );
}

uint8_t socket_to_port( POOL_T sock )
{
	switch ( sock ) {
	($each-SOCKET \i.]
		case ($i SOCKET_ID):
			return ($i SOCKET_PORT);

	[ )
	}
	return ( EV3_PORT__NONE_ );
}

bool brick_init( void )
{
	if ( ev3_init() < 1 ) return ( false );
	ev3_sensor_init();
	ev3_tacho_init();
	ev3_dc_init();
	return ( true );
}

void brick_uninit( void )
{
	ev3_uninit();
}

uint8_t brick_keys( void )
{
	uint8_t keys = 0;  /* default result */

	ev3_read_keys( &keys );
	return ( keys );
}

($import "ev3_sensor-dict.yu")
($import "ev3_class_decl.yu")
($import "brick.yu")

($import "ev3_tacho-dict.yu")
($import "ev3_class_decl.yu")
($import "brick.yu")

($import "ev3_dc-dict.yu")
($import "ev3_class_decl.yu")
($import "brick.yu")

void sleep_ms( uint32_t ms )
{
	Sleep( ms );
}

/** \} */
