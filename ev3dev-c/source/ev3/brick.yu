($!
     ____ __     ____   ___    ____ __         (((((()
    | |_  \ \  /   ) ) | |  ) | |_  \ \  /  \(@)- /
    |_|__  \_\/  __)_) |_|_/  |_|__  \_\/   /(@)- \
                                               ((())))

static bool ($CLASS_ID)_pool_to_desc( POOL_T pool, uint8_t *sn )
{
	uint8_t _sn;

	memset( sn, DESC_LIMIT, DESC_VEC_LEN );
	for ( _sn = 0; _sn < DESC_LIMIT; _sn++ ) {
		if ( ev3_($CLASS_ID)[ _sn ].type_inx != ($upper ($CLASS_ID))_TYPE__NONE_ ) {
			uint8_t sock = port_to_socket( ev3_($CLASS_ID)[ _sn ].port );
			if ( sock & pool ) {
				*sn = _sn;
				++sn;
				pool &= ~sock;
				if ( pool == 0 ) return ( true );
			}
		}
	}
	return ( false );
}

($each-CLASS_ATTR \i.]
	($if ($le ($i CLASS_ATTR_WRITE) RW)
		($if ($or ($ne ($index CLASS_TYPE_ATTR_ID_INDEX ($i CLASS_ATTR_ID)) -1)
			      ($ne ($index CLASS_ATTR_ID_INDEX      ($i CLASS_ATTR_ID)) -1)) ]
			INX_T ($CLASS_ID)_get_($i CLASS_ATTR_ID)( POOL_T sock )
			{
				uint8_t sn;

				if (( sock != SOCKET__NONE_ ) && ev3_search_($CLASS_ID)_plugged_in( socket_to_port( sock ), EXT_PORT__NONE_, &sn, 0 )) {
					return ( get_($CLASS_ID)_($i CLASS_ATTR_ID)_inx( sn ));
				}
				return ( ($upper CLASS_ID)_($upper ($i CLASS_ATTR_ID))__UNKNOWN_ );
			}

		[ \else ($if ($ne ($index CLASS_ATTR_ID_FLAGS ($i CLASS_ATTR_ID)) -1) ]
			FLAGS_T ($CLASS_ID)_get_($i CLASS_ATTR_ID)( POOL_T sock )
			{
				uint8_t sn;
				FLAGS_T flags = ($upper CLASS_ID)_($upper ($i CLASS_ATTR_ID))__NONE_;

				if (( sock != SOCKET__NONE_ ) && ev3_search_($CLASS_ID)_plugged_in( socket_to_port( sock ), EXT_PORT__NONE_, &sn, 0 )) {
					get_($CLASS_ID)_($i CLASS_ATTR_ID)_flags( sn, &flags );
				}
				return ( flags );
			}

		[ \else ]
			($i CLASS_ATTR_TYPE) ($[*] ? ($i CLASS_ATTR_ARRAY))($CLASS_ID)_get_($i CLASS_ATTR_ID)( POOL_T sock($[, ($i CLASS_ATTR_TYPE) *buf, size_t sz] ? ($i CLASS_ATTR_ARRAY) | [, ($i CLASS_ATTR_TYPE) defval]) )
			{
				uint8_t sn;
				($unless ($i CLASS_ATTR_ARRAY) ]
					($i CLASS_ATTR_TYPE) val = defval, *buf = &val;

				[ )
				if (( sock != SOCKET__NONE_ ) && ev3_search_($CLASS_ID)_plugged_in( socket_to_port( sock ), EXT_PORT__NONE_, &sn, 0 )) {
					get_($CLASS_ID)_($i CLASS_ATTR_ID)( sn, buf($[, sz] ? ($i CLASS_ATTR_ARRAY)) );
				}
				return ( ($[*] ? ($not ($i CLASS_ATTR_ARRAY)))buf );
			}

		[ ))
	)

	($if ($ge ($i CLASS_ATTR_WRITE) RW)
		($if ($or ($ne ($index CLASS_TYPE_ATTR_ID_INDEX ($i CLASS_ATTR_ID)) -1)
			      ($ne ($index CLASS_ATTR_ID_INDEX      ($i CLASS_ATTR_ID)) -1)) ]
			bool ($CLASS_ID)_set_($i CLASS_ATTR_ID)( POOL_T pool, INX_T ($i CLASS_ATTR_ID)_inx )
			{
				uint8_t sn[ DESC_VEC_LEN ];

				if ( ($CLASS_ID)_pool_to_desc( pool, sn )) {
					return ( multi_set_($CLASS_ID)_($i CLASS_ATTR_ID)_inx( sn, ($i CLASS_ATTR_ID)_inx ) > 0 );
				}
				return ( false );
			}

		[ \else ]
			bool ($CLASS_ID)_set_($i CLASS_ATTR_ID)( POOL_T pool, ($i CLASS_ATTR_TYPE) ($[*] ? ($i CLASS_ATTR_ARRAY))value($[, size_t sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) )
			{
				uint8_t sn[ DESC_VEC_LEN ];

				if ( ($CLASS_ID)_pool_to_desc( pool, sn )) {
					return ( multi_set_($CLASS_ID)_($i CLASS_ATTR_ID)( sn, value($[, sz] ? ($eq ($i CLASS_ATTR_ARRAY) 2)) ) > 0 );
				}
				return ( false );
			}

		[ )
	)

[ )

($each-CLASS_AVEC \i.]
	($i CLASS_AVEC_TYPE) ($[*] ? ($i CLASS_AVEC_ARRAY))($CLASS_ID)_get_($i CLASS_AVEC_ID)( uint8_t inx, POOL_T sock($[, ($i CLASS_AVEC_TYPE) *buf, size_t sz] ? ($i CLASS_AVEC_ARRAY) | [, ($i CLASS_AVEC_TYPE) defval]) )
	{
		uint8_t sn;
		($unless ($i CLASS_AVEC_ARRAY) ]
			($i CLASS_AVEC_TYPE) val = defval, *buf = &val;

		[ )
		if (( sock != SOCKET__NONE_ ) && ev3_search_($CLASS_ID)_plugged_in( socket_to_port( sock ), EXT_PORT__NONE_, &sn, 0 )) {
			get_($CLASS_ID)_($i CLASS_AVEC_ID)( inx, sn, buf($[, sz] ? ($i CLASS_AVEC_ARRAY)) );
		}
		return ( ($[*] ? ($not ($i CLASS_AVEC_ARRAY)))buf );
	}

[ )

($CLASS_TYPE_ATTR_ID_INDEX \attr.]
	($set _ATTR [_set_($attr)] ? ($eq ($index _BRICK_ATTR_ANONYMOUS ($q attr)) -1))

	($each-CLASS_TYPE \i.]
		($set _SYN  ($index CLASS_TYPE_ID_SYN_FOR ($i CLASS_TYPE_ID)))
		($! only for short names )
		($if ($ne _SYN -1) ]
			($set _TYPE ($_SYN CLASS_TYPE_ID_SYN))

			($($i ($$'CLASS_TYPE_($0)S' ($upper attr))) \ii.]

				bool ($_TYPE)($_ATTR)_($lower ($_VALUE_TO_ID ii))( POOL_T pool )
				{
					return ($CLASS_ID)_set_($attr)( pool, ($upper ($i CLASS_TYPE_ID))_($upper ($_VALUE_TO_ID ii)) );
				}

			[ )
		[ )
	[ )
[ )

($CLASS_ATTR_ID_INDEX \attr.]
	($set _ATTR [_set_($attr)] ? ($eq ($index _BRICK_ATTR_ANONYMOUS ($q attr)) -1))

	($($$'CLASS_($0)S' ($upper attr)) \i.]

		bool ($CLASS_ID)($_ATTR)_($lower ($_VALUE_TO_ID i))( POOL_T pool )
		{
			return ($CLASS_ID)_set_($attr)( pool, ($upper ($CLASS_ID))_($upper ($_VALUE_TO_ID i)) );
		}

	[ )
[ )

POOL_T ($CLASS_ID)_search( INX_T type_inx )
{
	uint8_t sn = 0;
	POOL_T pool = SOCKET__NONE_;

	while ( ev3_search_($CLASS_ID)( type_inx, &sn, sn )) {
		pool |= port_to_socket( ev3_($CLASS_ID)[ sn++ ].port );
	}
	return ( pool );
}

bool ($CLASS_ID)_is_plugged( POOL_T pool, INX_T type_inx )
{
	uint8_t sn;

	if ( pool == SOCKET__NONE_ ) return ( false );

	($set _PREF (`OUT) ? _CLASS_MOTOR | (`IN))

	($each-SOCKET \i.($if ($ne ($find ($i SOCKET_ID) _PREF) -1) ]
		if ( ($i SOCKET_ID) & pool ) {
			if ( !ev3_search_($CLASS_ID)_plugged_in( socket_to_port( ($i SOCKET_ID) ), EXT_PORT__NONE_, &sn, 0 ) ) return ( false );
			if (( type_inx != ($upper ($CLASS_ID))_TYPE__NONE_ ) && ( ev3_($CLASS_ID)[ sn ].type_inx != type_inx )) return ( false );
		}

	[ ))
	return ( true );
}

($if _CLASS_MOTOR ]
	bool ($CLASS_ID)_is_running( POOL_T pool )
	{
		($each-SOCKET \i.($if ($ne ($find ($i SOCKET_ID) (`OUT)) -1) ]
			if ( ($i SOCKET_ID) & pool ) {
				if ( ($CLASS_ID)_get_state( ($i SOCKET_ID) ) != ($upper ($CLASS_ID))_STATE__NONE_ ) return ( true );
			}

		[ ))
		return ( false );
	}

[ )
